{
    "sourceFile": "src/routes/schedule.routes.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1752403852448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752488600680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,5 +68,42 @@\n     res.status(500).json({ error: 'Failed to delete schedule' });\r\n   }\r\n });\r\n \r\n+// backend example for /api/schedules route\r\n+router.get('/api/schedules', async (req: Request, res: Response) => {\r\n+  const { date, classId, trainerId, clubId } = req.query;\r\n+\r\n+  try {\r\n+    const dateFilter =\r\n+      date\r\n+        ? {\r\n+            gte: new Date(`${date}T00:00:00.000Z`),\r\n+            lt: new Date(`${date}T23:59:59.999Z`),\r\n+          }\r\n+        : undefined;\r\n+\r\n+    const schedules = await prisma.classSchedule.findMany({\r\n+      where: {\r\n+        ...(classId && { id: classId as string }),\r\n+        ...(trainerId && { trainerId: trainerId as string }),\r\n+        ...(date && { date: dateFilter }),\r\n+        ...(clubId && { clubId: clubId as string }),\r\n+      },\r\n+      include: {\r\n+        trainer: true,\r\n+        members: true,\r\n+      },\r\n+      orderBy: {\r\n+        date: 'asc',\r\n+      },\r\n+    });\r\n+\r\n+    res.json(schedules);\r\n+  } catch (err) {\r\n+    console.error('Attendance fetch error:', err);\r\n+    res.status(500).json({ message: 'Error fetching attendance records' });\r\n+  }\r\n+});\r\n+\r\n+\r\n export default router;\r\n"
                },
                {
                    "date": 1752490243068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,42 +68,7 @@\n     res.status(500).json({ error: 'Failed to delete schedule' });\r\n   }\r\n });\r\n \r\n-// backend example for /api/schedules route\r\n-router.get('/api/schedules', async (req: Request, res: Response) => {\r\n-  const { date, classId, trainerId, clubId } = req.query;\r\n \r\n-  try {\r\n-    const dateFilter =\r\n-      date\r\n-        ? {\r\n-            gte: new Date(`${date}T00:00:00.000Z`),\r\n-            lt: new Date(`${date}T23:59:59.999Z`),\r\n-          }\r\n-        : undefined;\r\n \r\n-    const schedules = await prisma.classSchedule.findMany({\r\n-      where: {\r\n-        ...(classId && { id: classId as string }),\r\n-        ...(trainerId && { trainerId: trainerId as string }),\r\n-        ...(date && { date: dateFilter }),\r\n-        ...(clubId && { clubId: clubId as string }),\r\n-      },\r\n-      include: {\r\n-        trainer: true,\r\n-        members: true,\r\n-      },\r\n-      orderBy: {\r\n-        date: 'asc',\r\n-      },\r\n-    });\r\n-\r\n-    res.json(schedules);\r\n-  } catch (err) {\r\n-    console.error('Attendance fetch error:', err);\r\n-    res.status(500).json({ message: 'Error fetching attendance records' });\r\n-  }\r\n-});\r\n-\r\n-\r\n export default router;\r\n"
                },
                {
                    "date": 1752490846809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,16 +7,38 @@\n const router = express.Router();\r\n const prisma = new PrismaClient();\r\n \r\n // GET all schedules for a club\r\n+// router.get('/', async (req: Request, res: Response) => {\r\n+//   const { clubId } = req.query;\r\n+//   if (!clubId) return res.status(400).json({ error: 'Club ID is required' });\r\n+\r\n+//   try {\r\n+//     const schedules = await prisma.classSchedule.findMany({\r\n+//       where: { clubId: String(clubId) },\r\n+//       include: { trainer: true },\r\n+//       orderBy: { date: 'asc' },\r\n+//     });\r\n+//     res.json(schedules);\r\n+//   } catch (err) {\r\n+//     console.error('Fetch schedules error:', err);\r\n+//     res.status(500).json({ error: 'Failed to fetch schedules' });\r\n+//   }\r\n+// });\r\n+// GET all schedules for a club\r\n router.get('/', async (req: Request, res: Response) => {\r\n   const { clubId } = req.query;\r\n   if (!clubId) return res.status(400).json({ error: 'Club ID is required' });\r\n \r\n   try {\r\n     const schedules = await prisma.classSchedule.findMany({\r\n       where: { clubId: String(clubId) },\r\n-      include: { trainer: true },\r\n+      include: {\r\n+        trainer: true,\r\n+        bookings: {\r\n+          include: { member: true },\r\n+        }\r\n+      },\r\n       orderBy: { date: 'asc' },\r\n     });\r\n     res.json(schedules);\r\n   } catch (err) {\r\n@@ -24,8 +46,9 @@\n     res.status(500).json({ error: 'Failed to fetch schedules' });\r\n   }\r\n });\r\n \r\n+\r\n // POST create new schedule\r\n router.post('/', async (req: Request, res: Response) => {\r\n   const {\r\n     title,\r\n"
                },
                {
                    "date": 1752491796329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,41 +6,73 @@\n \r\n const router = express.Router();\r\n const prisma = new PrismaClient();\r\n \r\n-// GET all schedules for a club\r\n+\r\n // router.get('/', async (req: Request, res: Response) => {\r\n //   const { clubId } = req.query;\r\n //   if (!clubId) return res.status(400).json({ error: 'Club ID is required' });\r\n \r\n //   try {\r\n //     const schedules = await prisma.classSchedule.findMany({\r\n //       where: { clubId: String(clubId) },\r\n-//       include: { trainer: true },\r\n+//       include: {\r\n+//         trainer: true,\r\n+//         bookings: {\r\n+//           include: { member: true },\r\n+//         }\r\n+//       },\r\n //       orderBy: { date: 'asc' },\r\n //     });\r\n //     res.json(schedules);\r\n //   } catch (err) {\r\n //     console.error('Fetch schedules error:', err);\r\n //     res.status(500).json({ error: 'Failed to fetch schedules' });\r\n //   }\r\n // });\r\n-// GET all schedules for a club\r\n+\r\n+// In schedule.routes.ts, update your GET route:\r\n router.get('/', async (req: Request, res: Response) => {\r\n-  const { clubId } = req.query;\r\n+  const { clubId, date, trainerId, classId } = req.query;\r\n+  \r\n   if (!clubId) return res.status(400).json({ error: 'Club ID is required' });\r\n \r\n   try {\r\n+    const whereClause: any = { clubId: String(clubId) };\r\n+    \r\n+    // Add date filtering if provided\r\n+    if (date) {\r\n+      const filterDate = new Date(String(date));\r\n+      const nextDay = new Date(filterDate);\r\n+      nextDay.setDate(nextDay.getDate() + 1);\r\n+      \r\n+      whereClause.date = {\r\n+        gte: filterDate,\r\n+        lt: nextDay\r\n+      };\r\n+    }\r\n+    \r\n+    // Add trainer filtering if provided\r\n+    if (trainerId) {\r\n+      whereClause.trainerId = String(trainerId);\r\n+    }\r\n+    \r\n+    // Add specific class filtering if provided (though this might be redundant)\r\n+    if (classId) {\r\n+      whereClause.id = String(classId);\r\n+    }\r\n+\r\n     const schedules = await prisma.classSchedule.findMany({\r\n-      where: { clubId: String(clubId) },\r\n+      where: whereClause,\r\n       include: {\r\n         trainer: true,\r\n         bookings: {\r\n           include: { member: true },\r\n         }\r\n       },\r\n       orderBy: { date: 'asc' },\r\n     });\r\n+    \r\n     res.json(schedules);\r\n   } catch (err) {\r\n     console.error('Fetch schedules error:', err);\r\n     res.status(500).json({ error: 'Failed to fetch schedules' });\r\n"
                },
                {
                    "date": 1752584768488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n       data: {\r\n         title,\r\n         date: new Date(date),\r\n         duration,\r\n-        location,\r\n+        locationId : null,\r\n         trainerId,\r\n         maxCapacity,\r\n         clubId,\r\n       },\r\n"
                },
                {
                    "date": 1752752017404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,127 +3,17 @@\n import express from 'express';\r\n import { PrismaClient } from '@prisma/client';\r\n import { Request, Response } from 'express';\r\n \r\n+import { authMiddleware } from '../middlewares/authMiddleware';\r\n+import { getTrainerSchedule , createClass, updateClass, cancelClass} from '../controllers/schedule.controller';\r\n+\r\n+\r\n const router = express.Router();\r\n const prisma = new PrismaClient();\r\n \r\n+router.get('/api/schedule/trainer/my', authMiddleware, getTrainerSchedule); // Get classes for logged-in trainer\r\n+router.post('/api/schedule/trainer', authMiddleware, createClass); // Create class by trainer\r\n+router.patch('/api/schedule/trainer/:id', authMiddleware, updateClass); // Update class by trainer\r\n+router.delete('/api/schedule/trainer/:id', authMiddleware, cancelClass); // Cancel class by trainer\r\n \r\n-// router.get('/', async (req: Request, res: Response) => {\r\n-//   const { clubId } = req.query;\r\n-//   if (!clubId) return res.status(400).json({ error: 'Club ID is required' });\r\n-\r\n-//   try {\r\n-//     const schedules = await prisma.classSchedule.findMany({\r\n-//       where: { clubId: String(clubId) },\r\n-//       include: {\r\n-//         trainer: true,\r\n-//         bookings: {\r\n-//           include: { member: true },\r\n-//         }\r\n-//       },\r\n-//       orderBy: { date: 'asc' },\r\n-//     });\r\n-//     res.json(schedules);\r\n-//   } catch (err) {\r\n-//     console.error('Fetch schedules error:', err);\r\n-//     res.status(500).json({ error: 'Failed to fetch schedules' });\r\n-//   }\r\n-// });\r\n-\r\n-// In schedule.routes.ts, update your GET route:\r\n-router.get('/', async (req: Request, res: Response) => {\r\n-  const { clubId, date, trainerId, classId } = req.query;\r\n-  \r\n-  if (!clubId) return res.status(400).json({ error: 'Club ID is required' });\r\n-\r\n-  try {\r\n-    const whereClause: any = { clubId: String(clubId) };\r\n-    \r\n-    // Add date filtering if provided\r\n-    if (date) {\r\n-      const filterDate = new Date(String(date));\r\n-      const nextDay = new Date(filterDate);\r\n-      nextDay.setDate(nextDay.getDate() + 1);\r\n-      \r\n-      whereClause.date = {\r\n-        gte: filterDate,\r\n-        lt: nextDay\r\n-      };\r\n-    }\r\n-    \r\n-    // Add trainer filtering if provided\r\n-    if (trainerId) {\r\n-      whereClause.trainerId = String(trainerId);\r\n-    }\r\n-    \r\n-    // Add specific class filtering if provided (though this might be redundant)\r\n-    if (classId) {\r\n-      whereClause.id = String(classId);\r\n-    }\r\n-\r\n-    const schedules = await prisma.classSchedule.findMany({\r\n-      where: whereClause,\r\n-      include: {\r\n-        trainer: true,\r\n-        bookings: {\r\n-          include: { member: true },\r\n-        }\r\n-      },\r\n-      orderBy: { date: 'asc' },\r\n-    });\r\n-    \r\n-    res.json(schedules);\r\n-  } catch (err) {\r\n-    console.error('Fetch schedules error:', err);\r\n-    res.status(500).json({ error: 'Failed to fetch schedules' });\r\n-  }\r\n-});\r\n-\r\n-\r\n-// POST create new schedule\r\n-router.post('/', async (req: Request, res: Response) => {\r\n-  const {\r\n-    title,\r\n-    date,\r\n-    duration,\r\n-    location,\r\n-    trainerId,\r\n-    maxCapacity,\r\n-    clubId,\r\n-  } = req.body;\r\n-\r\n-  try {\r\n-    const newSchedule = await prisma.classSchedule.create({\r\n-      data: {\r\n-        title,\r\n-        date: new Date(date),\r\n-        duration,\r\n-        locationId : null,\r\n-        trainerId,\r\n-        maxCapacity,\r\n-        clubId,\r\n-      },\r\n-    });\r\n-    res.status(201).json(newSchedule);\r\n-  } catch (err) {\r\n-    console.error('Create schedule error:', err);\r\n-    res.status(500).json({ error: 'Failed to create schedule' });\r\n-  }\r\n-});\r\n-\r\n-// DELETE a schedule by ID\r\n-router.delete('/:id', async (req: Request, res: Response) => {\r\n-  const { id } = req.params;\r\n-\r\n-  try {\r\n-    await prisma.classSchedule.delete({ where: { id } });\r\n-    res.status(204).end();\r\n-  } catch (err) {\r\n-    console.error('Delete schedule error:', err);\r\n-    res.status(500).json({ error: 'Failed to delete schedule' });\r\n-  }\r\n-});\r\n-\r\n-\r\n-\r\n export default router;\r\n"
                },
                {
                    "date": 1752757679089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,57 @@\n-//src/routes/schedule.routes.ts\r\n+// gym-api/src/routes/schedule.routes.ts\r\n+import { Router } from 'express';\r\n+import { authMiddleware } from '../middlewares/authMiddleware'; // Your authentication middleware\r\n \r\n-import express from 'express';\r\n-import { PrismaClient } from '@prisma/client';\r\n-import { Request, Response } from 'express';\r\n+import {\r\n+  getTrainerSchedule,\r\n+  createClass,         // Trainer creates their own class\r\n+  updateClass,         // Trainer updates their own class\r\n+  cancelClass,         // Trainer cancels their own class\r\n+  getClassesByAdmin,   // Admin fetches classes for their club\r\n+  createClassByAdmin,  // Admin creates a class (assigns trainer)\r\n+  updateClassByAdmin,  // Admin updates any class in their club\r\n+  deleteClassByAdmin   // Admin deletes/cancels any class in their club\r\n+} from '../controllers/schedule.controller'; // Import all consolidated controller functions\r\n \r\n-import { authMiddleware } from '../middlewares/authMiddleware';\r\n-import { getTrainerSchedule , createClass, updateClass, cancelClass} from '../controllers/schedule.controller';\r\n+const router = Router();\r\n \r\n+// ====================================================================================\r\n+// --- TRAINER-SPECIFIC SCHEDULE ROUTES ---\r\n+// These routes are prefixed with '/trainer' and target actions specific to the logged-in trainer.\r\n+// They all require authentication via authMiddleware.\r\n+// ====================================================================================\r\n \r\n-const router = express.Router();\r\n-const prisma = new PrismaClient();\r\n+// GET /api/schedule/trainer/my - Fetch classes for the logged-in trainer\r\n+router.get('/trainer/my', authMiddleware, getTrainerSchedule);\r\n \r\n-router.get('/api/schedule/trainer/my', authMiddleware, getTrainerSchedule); // Get classes for logged-in trainer\r\n-router.post('/api/schedule/trainer', authMiddleware, createClass); // Create class by trainer\r\n-router.patch('/api/schedule/trainer/:id', authMiddleware, updateClass); // Update class by trainer\r\n-router.delete('/api/schedule/trainer/:id', authMiddleware, cancelClass); // Cancel class by trainer\r\n+// POST /api/schedule/trainer - Create a new class by the logged-in trainer\r\n+router.post('/trainer', authMiddleware, createClass);\r\n \r\n-export default router;\r\n+// PATCH /api/schedule/trainer/:id - Update a class created by the logged-in trainer\r\n+router.patch('/trainer/:id', authMiddleware, updateClass);\r\n+\r\n+// DELETE /api/schedule/trainer/:id - Cancel (mark as cancelled) a class created by the logged-in trainer\r\n+router.delete('/trainer/:id', authMiddleware, cancelClass);\r\n+\r\n+\r\n+// ====================================================================================\r\n+// --- FRANCHISE ADMIN-SPECIFIC SCHEDULE ROUTES ---\r\n+// These routes are prefixed with '/admin' and target actions specific to franchise admins.\r\n+// They allow admins to manage classes across their entire club.\r\n+// They all require authentication via authMiddleware.\r\n+// ====================================================================================\r\n+\r\n+// GET /api/schedule/admin/club - Fetch all classes for the logged-in franchise admin's club\r\n+router.get('/admin/club', authMiddleware, getClassesByAdmin);\r\n+\r\n+// POST /api/schedule/admin - Create a new class by the franchise admin (assigns trainer)\r\n+router.post('/admin', authMiddleware, createClassByAdmin);\r\n+\r\n+// PATCH /api/schedule/admin/:id - Update any class within the franchise admin's club\r\n+router.patch('/admin/:id', authMiddleware, updateClassByAdmin);\r\n+\r\n+// DELETE /api/schedule/admin/:id - Delete/Cancel any class within the franchise admin's club\r\n+router.delete('/admin/:id', authMiddleware, deleteClassByAdmin);\r\n+\r\n+\r\n+export default router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753041391686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,28 @@\n } from '../controllers/schedule.controller'; // Import all consolidated controller functions\r\n \r\n const router = Router();\r\n \r\n+router.get('/', async (req, res) => {\r\n+  const { limit = 5 } = req.query;\r\n+\r\n+  try {\r\n+    const schedules = await prisma.classSchedule.findMany({\r\n+      include: {\r\n+        trainer: { select: { name: true } },\r\n+        location: true,\r\n+      },\r\n+      orderBy: { date: 'desc' },\r\n+      take: Number(limit),\r\n+    });\r\n+\r\n+    res.json({ data: schedules });\r\n+  } catch (err) {\r\n+    console.error('Fetch schedule error:', err);\r\n+    res.status(500).json({ error: 'Failed to fetch schedule' });\r\n+  }\r\n+});\r\n+\r\n // ====================================================================================\r\n // --- TRAINER-SPECIFIC SCHEDULE ROUTES ---\r\n // These routes are prefixed with '/trainer' and target actions specific to the logged-in trainer.\r\n // They all require authentication via authMiddleware.\r\n"
                },
                {
                    "date": 1753041661937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n // gym-api/src/routes/schedule.routes.ts\r\n import { Router } from 'express';\r\n-import { authMiddleware } from '../middlewares/authMiddleware'; // Your authentication middleware\r\n+import { authMiddleware } from '../middlewares/authMiddleware'; \r\n+import { PrismaClient } from '@prisma/client';\r\n \r\n import {\r\n   getTrainerSchedule,\r\n   createClass,         // Trainer creates their own class\r\n@@ -13,9 +14,9 @@\n   deleteClassByAdmin   // Admin deletes/cancels any class in their club\r\n } from '../controllers/schedule.controller'; // Import all consolidated controller functions\r\n \r\n const router = Router();\r\n-\r\n+const prisma = new PrismaClient();\r\n router.get('/', async (req, res) => {\r\n   const { limit = 5 } = req.query;\r\n \r\n   try {\r\n"
                },
                {
                    "date": 1753071986241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,90 @@\n+// gym-api/src/routes/schedule.routes.ts\r\n+import { Router } from 'express';\r\n+import { authMiddleware } from '../middlewares/authMiddleware'; \r\n+import { PrismaClient } from '@prisma/client';\r\n+\r\n+import {\r\n+  getTrainerSchedule,\r\n+  createClass,         // Trainer creates their own class\r\n+  updateClass,         // Trainer updates their own class\r\n+  cancelClass,         // Trainer cancels their own class\r\n+  getClassesByAdmin,   // Admin fetches classes for their club\r\n+  createClassByAdmin,  // Admin creates a class (assigns trainer)\r\n+  updateClassByAdmin,  // Admin updates any class in their club\r\n+  deleteClassByAdmin   // Admin deletes/cancels any class in their club\r\n+} from '../controllers/schedule.controller'; // Import all consolidated controller functions\r\n+\r\n+const router = Router();\r\n+const prisma = new PrismaClient();\r\n+\r\n+router.get('/', async (req, res) => {\r\n+  const { limit = 5, clubId } = req.query; // Add clubId to query params\r\n+  const take = Number(limit);\r\n+\r\n+  let whereClause: any = {}; // Initialize as empty object\r\n+\r\n+  if (clubId) {\r\n+    whereClause.clubId = String(clubId);\r\n+  } else {\r\n+    console.log('Backend /api/schedule: No clubId provided, fetching GLOBAL schedules.');\r\n+  }\r\n+\r\n+  try {\r\n+    const schedules = await prisma.classSchedule.findMany({\r\n+      where: whereClause, // Apply the conditional clubId filter\r\n+      include: {\r\n+        trainer: { select: { name: true } },\r\n+        location: true,\r\n+      },\r\n+      orderBy: { date: 'desc' },\r\n+      take: take,\r\n+    });\r\n+\r\n+    res.json(schedules); // Return the array directly, no 'data' wrapper needed\r\n+  } catch (err) {\r\n+    console.error('Fetch schedule error:', err);\r\n+    res.status(500).json({ error: 'Failed to fetch schedule' });\r\n+  }\r\n+});\r\n+\r\n+\r\n+// ====================================================================================\r\n+// --- TRAINER-SPECIFIC SCHEDULE ROUTES ---\r\n+// These routes are prefixed with '/trainer' and target actions specific to the logged-in trainer.\r\n+// They all require authentication via authMiddleware.\r\n+// ====================================================================================\r\n+\r\n+// GET /api/schedule/trainer/my - Fetch classes for the logged-in trainer\r\n+router.get('/trainer/my', authMiddleware, getTrainerSchedule);\r\n+\r\n+// POST /api/schedule/trainer - Create a new class by the logged-in trainer\r\n+router.post('/trainer', authMiddleware, createClass);\r\n+\r\n+// PATCH /api/schedule/trainer/:id - Update a class created by the logged-in trainer\r\n+router.patch('/trainer/:id', authMiddleware, updateClass);\r\n+\r\n+// DELETE /api/schedule/trainer/:id - Cancel (mark as cancelled) a class created by the logged-in trainer\r\n+router.delete('/trainer/:id', authMiddleware, cancelClass);\r\n+\r\n+\r\n+// ====================================================================================\r\n+// --- FRANCHISE ADMIN-SPECIFIC SCHEDULE ROUTES ---\r\n+// These routes are prefixed with '/admin' and target actions specific to franchise admins.\r\n+// They allow admins to manage classes across their entire club.\r\n+// They all require authentication via authMiddleware.\r\n+// ====================================================================================\r\n+\r\n+// GET /api/schedule/admin/club - Fetch all classes for the logged-in franchise admin's club\r\n+router.get('/admin/club', authMiddleware, getClassesByAdmin);\r\n+\r\n+// POST /api/schedule/admin - Create a new class by the franchise admin (assigns trainer)\r\n+router.post('/admin', authMiddleware, createClassByAdmin);\r\n+\r\n+// PATCH /api/schedule/admin/:id - Update any class within the franchise admin's club\r\n+router.patch('/admin/:id', authMiddleware, updateClassByAdmin);\r\n+\r\n+// DELETE /api/schedule/admin/:id - Delete/Cancel any class within the franchise admin's club\r\n+router.delete('/admin/:id', authMiddleware, deleteClassByAdmin);\r\n+\r\n+\r\n+export default router;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1752403852447,
            "name": "Commit-0",
            "content": "//src/routes/schedule.routes.ts\r\n\r\nimport express from 'express';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport { Request, Response } from 'express';\r\n\r\nconst router = express.Router();\r\nconst prisma = new PrismaClient();\r\n\r\n// GET all schedules for a club\r\nrouter.get('/', async (req: Request, res: Response) => {\r\n  const { clubId } = req.query;\r\n  if (!clubId) return res.status(400).json({ error: 'Club ID is required' });\r\n\r\n  try {\r\n    const schedules = await prisma.classSchedule.findMany({\r\n      where: { clubId: String(clubId) },\r\n      include: { trainer: true },\r\n      orderBy: { date: 'asc' },\r\n    });\r\n    res.json(schedules);\r\n  } catch (err) {\r\n    console.error('Fetch schedules error:', err);\r\n    res.status(500).json({ error: 'Failed to fetch schedules' });\r\n  }\r\n});\r\n\r\n// POST create new schedule\r\nrouter.post('/', async (req: Request, res: Response) => {\r\n  const {\r\n    title,\r\n    date,\r\n    duration,\r\n    location,\r\n    trainerId,\r\n    maxCapacity,\r\n    clubId,\r\n  } = req.body;\r\n\r\n  try {\r\n    const newSchedule = await prisma.classSchedule.create({\r\n      data: {\r\n        title,\r\n        date: new Date(date),\r\n        duration,\r\n        location,\r\n        trainerId,\r\n        maxCapacity,\r\n        clubId,\r\n      },\r\n    });\r\n    res.status(201).json(newSchedule);\r\n  } catch (err) {\r\n    console.error('Create schedule error:', err);\r\n    res.status(500).json({ error: 'Failed to create schedule' });\r\n  }\r\n});\r\n\r\n// DELETE a schedule by ID\r\nrouter.delete('/:id', async (req: Request, res: Response) => {\r\n  const { id } = req.params;\r\n\r\n  try {\r\n    await prisma.classSchedule.delete({ where: { id } });\r\n    res.status(204).end();\r\n  } catch (err) {\r\n    console.error('Delete schedule error:', err);\r\n    res.status(500).json({ error: 'Failed to delete schedule' });\r\n  }\r\n});\r\n\r\nexport default router;\r\n"
        }
    ]
}