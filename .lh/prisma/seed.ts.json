{
    "sourceFile": "prisma/seed.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 42,
            "patches": [
                {
                    "date": 1752122385177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752127266280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,29 @@\n+import { PrismaClient } from '../generated/prisma';\r\n import bcrypt from 'bcryptjs';\r\n-import prisma from '../src/lib/prisma';\r\n \r\n-async function seed() {\r\n+const prisma = new PrismaClient();\r\n+\r\n+async function main() {\r\n+  const hashedPassword = await bcrypt.hash('password123', 10);\r\n+\r\n   await prisma.user.createMany({\r\n     data: [\r\n       {\r\n         email: 'super@gym.com',\r\n-        password: await bcrypt.hash('super123', 10),\r\n+        password: hashedPassword,\r\n         role: 'super_admin',\r\n       },\r\n       {\r\n         email: 'franchise@gym.com',\r\n-        password: await bcrypt.hash('fran123', 10),\r\n+        password: hashedPassword,\r\n         role: 'franchise_admin',\r\n-        clubId: 'CLUB001',\r\n+        clubId: 'club1',\r\n       },\r\n     ],\r\n+    skipDuplicates: true,\r\n   });\r\n+\r\n+  console.log('✅ Seeded test users');\r\n }\r\n \r\n-seed().then(() => {\r\n-  console.log('Seeding done.');\r\n-});\r\n+main().finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1752127363944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,40 @@\n+import { PrismaClient } from '../generated/prisma';\r\n+import bcrypt from 'bcryptjs';\r\n+\r\n+const prisma = new PrismaClient();\r\n+\r\n+async function main() {\r\n+  const hashedPassword = await bcrypt.hash('password123', 10);\r\n+\r\n+  // 👇 Step 1: Create a dummy club\r\n+  const club = await prisma.club.upsert({\r\n+    where: { id: 'club1' },\r\n+    update: {},\r\n+    create: {\r\n+      id: 'club1',\r\n+      name: 'Downtown Gym',\r\n+    },\r\n+  });\r\n+\r\n+  // 👇 Step 2: Create users referencing that club\r\n+  await prisma.user.createMany({\r\n+    data: [\r\n+      {\r\n+        email: 'super@gym.com',\r\n+        password: hashedPassword,\r\n+        role: 'super_admin',\r\n+      },\r\n+      {\r\n+        email: 'franchise@gym.com',\r\n+        password: hashedPassword,\r\n+        role: 'franchise_admin',\r\n+        clubId: club.id,\r\n+      },\r\n+    ],\r\n+    skipDuplicates: true,\r\n+  });\r\n+\r\n+  console.log('✅ Seeded test users & club');\r\n+}\r\n+\r\n+main().finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1752209207239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import { PrismaClient } from '../generated/prisma';\r\n+import { PrismaClient } from '@prisma/client';\r\n import bcrypt from 'bcryptjs';\r\n \r\n const prisma = new PrismaClient();\r\n \r\n@@ -11,9 +11,10 @@\n     where: { id: 'club1' },\r\n     update: {},\r\n     create: {\r\n       id: 'club1',\r\n-      name: 'Downtown Gym',\r\n+      name: 'Golf Simulator',\r\n+      location: 'City Center'\r\n     },\r\n   });\r\n \r\n   // 👇 Step 2: Create users referencing that club\r\n@@ -28,42 +29,29 @@\n         email: 'franchise@gym.com',\r\n         password: hashedPassword,\r\n         role: 'franchise_admin',\r\n         clubId: club.id,\r\n-      },\r\n+      }\r\n     ],\r\n     skipDuplicates: true,\r\n   });\r\n \r\n-  console.log('✅ Seeded test users & club');\r\n-}\r\n-\r\n-main().finally(() => prisma.$disconnect());\r\n-import { PrismaClient } from '../generated/prisma';\r\n-import bcrypt from 'bcryptjs';\r\n-\r\n-const prisma = new PrismaClient();\r\n-\r\n-async function main() {\r\n-  const hashedPassword = await bcrypt.hash('password123', 10);\r\n-\r\n-  await prisma.user.createMany({\r\n-    data: [\r\n-      {\r\n-        email: 'super@gym.com',\r\n-        password: hashedPassword,\r\n-        role: 'super_admin',\r\n-      },\r\n-      {\r\n-        email: 'franchise@gym.com',\r\n-        password: hashedPassword,\r\n-        role: 'franchise_admin',\r\n-        clubId: 'club1',\r\n-      },\r\n-    ],\r\n-    skipDuplicates: true,\r\n+  // 👇 Step 3: Create a trainer linked to the club\r\n+  await prisma.trainer.upsert({\r\n+    where: { email: 'trainer@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      name: 'Jane Trainer',\r\n+      email: 'trainer@gym.com',\r\n+      clubId: club.id\r\n+    },\r\n   });\r\n \r\n-  console.log('✅ Seeded test users');\r\n+  console.log('✅ Seeded test club, users, and trainer');\r\n }\r\n \r\n-main().finally(() => prisma.$disconnect());\r\n+main()\r\n+  .catch((e) => {\r\n+    console.error(e);\r\n+    process.exit(1);\r\n+  })\r\n+  .finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1752212744200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,72 @@\n+import { PrismaClient } from '@prisma/client';\r\n+import bcrypt from 'bcryptjs';\r\n+\r\n+const prisma = new PrismaClient();\r\n+\r\n+async function main() {\r\n+  const hashedPassword = await bcrypt.hash('password123', 10);\r\n+\r\n+  // 👇 Step 1: Create a dummy club\r\n+  const club = await prisma.club.upsert({\r\n+    where: { id: 'club1' },\r\n+    update: {},\r\n+    create: {\r\n+      id: 'club1',\r\n+      name: 'Golf Simulator',\r\n+      location: 'City Center'\r\n+    },\r\n+  });\r\n+\r\n+  // 👇 Step 2: Create users referencing that club\r\n+  // ✅ Step 2: Upsert super admin\r\n+await prisma.user.upsert({\r\n+  where: { email: 'super@gym.com' },\r\n+  update: {\r\n+    password: hashedPassword,\r\n+    role: 'super_admin',\r\n+    clubId: null,\r\n+  },\r\n+  create: {\r\n+    email: 'super@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'super_admin',\r\n+  },\r\n+});\r\n+\r\n+// ✅ Step 3: Upsert franchise admin\r\n+await prisma.user.upsert({\r\n+  where: { email: 'franchise@gym.com' },\r\n+  update: {\r\n+    password: hashedPassword,\r\n+    role: 'franchise_admin',\r\n+    clubId: club.id,\r\n+  },\r\n+  create: {\r\n+    email: 'franchise@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'franchise_admin',\r\n+    clubId: club.id,\r\n+  },\r\n+});\r\n+\r\n+\r\n+  // 👇 Step 3: Create a trainer linked to the club\r\n+  await prisma.trainer.upsert({\r\n+    where: { email: 'trainer@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      name: 'Jane Trainer',\r\n+      email: 'trainer@gym.com',\r\n+      clubId: club.id\r\n+    },\r\n+  });\r\n+\r\n+  console.log('✅ Seeded test club, users, and trainer');\r\n+}\r\n+\r\n+main()\r\n+  .catch((e) => {\r\n+    console.error(e);\r\n+    process.exit(1);\r\n+  })\r\n+  .finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1752301603298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,100 @@\n+import { PrismaClient } from '@prisma/client';\r\n+import bcrypt from 'bcryptjs';\r\n+\r\n+const prisma = new PrismaClient();\r\n+\r\n+async function main() {\r\n+  const hashedPassword = await bcrypt.hash('password123', 10);\r\n+\r\n+  // 👇 Step 1: Create a dummy club\r\n+  const club = await prisma.club.upsert({\r\n+    where: { id: 'club1' },\r\n+    update: {},\r\n+    create: {\r\n+      id: 'club1',\r\n+      name: 'Golf Simulator',\r\n+      location: 'City Center'\r\n+    },\r\n+  });\r\n+\r\n+  // 👇 Step 2: Create users referencing that club\r\n+  // ✅ Step 2: Upsert super admin\r\n+await prisma.user.upsert({\r\n+  where: { email: 'super@gym.com' },\r\n+  update: {\r\n+    password: hashedPassword,\r\n+    role: 'super_admin',\r\n+    clubId: null,\r\n+  },\r\n+  create: {\r\n+    email: 'super@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'super_admin',\r\n+  },\r\n+});\r\n+\r\n+// ✅ Step 3: Upsert franchise admin\r\n+await prisma.user.upsert({\r\n+  where: { email: 'franchise@gym.com' },\r\n+  update: {\r\n+    password: hashedPassword,\r\n+    role: 'franchise_admin',\r\n+    clubId: club.id,\r\n+  },\r\n+  create: {\r\n+    email: 'franchise@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'franchise_admin',\r\n+    clubId: club.id,\r\n+  },\r\n+});\r\n+\r\n+//membership plans\r\n+\r\n+  await prisma.membershipPlan.createMany({\r\n+    data: [\r\n+      {\r\n+        name: 'Basic',\r\n+        description: 'Access to gym equipment and showers',\r\n+        price: 29.99,\r\n+        durationInDays: 30,\r\n+      },\r\n+      {\r\n+        name: 'Premium',\r\n+        description: 'Includes group classes, personal trainer access',\r\n+        price: 59.99,\r\n+        durationInDays: 30,\r\n+      },\r\n+      {\r\n+        name: 'Annual',\r\n+        description: 'Yearly membership with full benefits',\r\n+        price: 499.99,\r\n+        durationInDays: 365,\r\n+      },\r\n+    ],\r\n+    skipDuplicates: true,\r\n+  });\r\n+\r\n+\r\n+  // 👇 Step 3: Create a trainer linked to the club\r\n+  await prisma.trainer.upsert({\r\n+    where: { email: 'trainer@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      name: 'Jane Trainer',\r\n+      email: 'trainer@gym.com',\r\n+      clubId: club.id\r\n+    },\r\n+  });\r\n+\r\n+  console.log('✅ Seeded test club, users, and trainer');\r\n+}\r\n+\r\n+\r\n+\r\n+main()\r\n+  .catch((e) => {\r\n+    console.error(e);\r\n+    process.exit(1);\r\n+  })\r\n+  .finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1752405987059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,10 @@\n const prisma = new PrismaClient();\r\n \r\n async function main() {\r\n   const hashedPassword = await bcrypt.hash('password123', 10);\r\n+  const trainer = await prisma.trainer.findFirst(); // or create a dummy trainer\r\n+  const club = await prisma.club.findFirst();   \r\n \r\n   // 👇 Step 1: Create a dummy club\r\n   const club = await prisma.club.upsert({\r\n     where: { id: 'club1' },\r\n@@ -90,9 +92,40 @@\n   console.log('✅ Seeded test club, users, and trainer');\r\n }\r\n \r\n \r\n+//make schedules\r\n \r\n+if (!trainer || !club) throw new Error('Missing trainer or club');\r\n+  await prisma.classSchedule.createMany({\r\n+    data: [\r\n+      {\r\n+        title: 'Morning Yoga',\r\n+        date: new Date('2025-07-15T08:00:00Z'),\r\n+        duration: 60,\r\n+        location: 'Room A',\r\n+        trainerId: trainer.id,\r\n+        clubId: club.id,\r\n+        maxCapacity: 20,\r\n+      },\r\n+      {\r\n+        title: 'HIIT Blast',\r\n+        date: new Date('2025-07-16T10:00:00Z'),\r\n+        duration: 45,\r\n+        location: 'Room B',\r\n+        trainerId: trainer.id,\r\n+        clubId: club.id,\r\n+        maxCapacity: 25,\r\n+      },\r\n+    ],\r\n+  });\r\n+\r\n+  console.log('✅ Seeded class schedules.');\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n main()\r\n   .catch((e) => {\r\n     console.error(e);\r\n     process.exit(1);\r\n"
                },
                {
                    "date": 1752406014618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,133 @@\n+import { PrismaClient } from '@prisma/client';\r\n+import bcrypt from 'bcryptjs';\r\n+\r\n+const prisma = new PrismaClient();\r\n+\r\n+async function main() {\r\n+  const hashedPassword = await bcrypt.hash('password123', 10);\r\n+  const trainer = await prisma.trainer.findFirst(); // or create a dummy trainer\r\n+  const club = await prisma.club.findFirst();   \r\n+\r\n+  // 👇 Step 1: Create a dummy club\r\n+  const club = await prisma.club.upsert({\r\n+    where: { id: 'club1' },\r\n+    update: {},\r\n+    create: {\r\n+      id: 'club1',\r\n+      name: 'Golf Simulator',\r\n+      location: 'City Center'\r\n+    },\r\n+  });\r\n+\r\n+  // 👇 Step 2: Create users referencing that club\r\n+  // ✅ Step 2: Upsert super admin\r\n+await prisma.user.upsert({\r\n+  where: { email: 'super@gym.com' },\r\n+  update: {\r\n+    password: hashedPassword,\r\n+    role: 'super_admin',\r\n+    clubId: null,\r\n+  },\r\n+  create: {\r\n+    email: 'super@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'super_admin',\r\n+  },\r\n+});\r\n+\r\n+// ✅ Step 3: Upsert franchise admin\r\n+await prisma.user.upsert({\r\n+  where: { email: 'franchise@gym.com' },\r\n+  update: {\r\n+    password: hashedPassword,\r\n+    role: 'franchise_admin',\r\n+    clubId: club.id,\r\n+  },\r\n+  create: {\r\n+    email: 'franchise@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'franchise_admin',\r\n+    clubId: club.id,\r\n+  },\r\n+});\r\n+\r\n+//membership plans\r\n+\r\n+  await prisma.membershipPlan.createMany({\r\n+    data: [\r\n+      {\r\n+        name: 'Basic',\r\n+        description: 'Access to gym equipment and showers',\r\n+        price: 29.99,\r\n+        durationInDays: 30,\r\n+      },\r\n+      {\r\n+        name: 'Premium',\r\n+        description: 'Includes group classes, personal trainer access',\r\n+        price: 59.99,\r\n+        durationInDays: 30,\r\n+      },\r\n+      {\r\n+        name: 'Annual',\r\n+        description: 'Yearly membership with full benefits',\r\n+        price: 499.99,\r\n+        durationInDays: 365,\r\n+      },\r\n+    ],\r\n+    skipDuplicates: true,\r\n+  });\r\n+\r\n+\r\n+  // 👇 Step 3: Create a trainer linked to the club\r\n+  await prisma.trainer.upsert({\r\n+    where: { email: 'trainer@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      name: 'Jane Trainer',\r\n+      email: 'trainer@gym.com',\r\n+      clubId: club.id\r\n+    },\r\n+  });\r\n+\r\n+  console.log('✅ Seeded test club, users, and trainer');\r\n+}\r\n+\r\n+\r\n+//make schedules\r\n+\r\n+if (!trainer || !club) throw new Error('Missing trainer or club');\r\n+  await prisma.classSchedule.createMany({\r\n+    data: [\r\n+      {\r\n+        title: 'Morning Yoga',\r\n+        date: new Date('2025-07-15T08:00:00Z'),\r\n+        duration: 60,\r\n+        location: 'Room A',\r\n+        trainerId: trainer.id,\r\n+        clubId: club.id,\r\n+        maxCapacity: 20,\r\n+      },\r\n+      {\r\n+        title: 'HIIT Blast',\r\n+        date: new Date('2025-07-16T10:00:00Z'),\r\n+        duration: 45,\r\n+        location: 'Room B',\r\n+        trainerId: trainer.id,\r\n+        clubId: club.id,\r\n+        maxCapacity: 25,\r\n+      },\r\n+    ],\r\n+  });\r\n+\r\n+  console.log('✅ Seeded class schedules.');\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+main()\r\n+  .catch((e) => {\r\n+    console.error(e);\r\n+    process.exit(1);\r\n+  })\r\n+  .finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1752406205330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,119 @@\n+import { PrismaClient } from '@prisma/client';\r\n+import bcrypt from 'bcryptjs';\r\n+\r\n+const prisma = new PrismaClient();\r\n+\r\n+async function main() {\r\n+const hashedPassword = await bcrypt.hash('password123', 10);\r\n+\r\n+  // 👇 Step 1: Upsert club\r\n+  const club = await prisma.club.upsert({\r\n+    where: { id: 'club1' },\r\n+    update: {},\r\n+    create: {\r\n+      id: 'club1',\r\n+      name: 'Golf Simulator',\r\n+      location: 'City Center',\r\n+    },\r\n+  });\r\n+\r\n+  // 👇 Step 2: Upsert users\r\n+  await prisma.user.upsert({\r\n+    where: { email: 'super@gym.com' },\r\n+    update: {\r\n+      password: hashedPassword,\r\n+      role: 'super_admin',\r\n+      clubId: null,\r\n+    },\r\n+    create: {\r\n+      email: 'super@gym.com',\r\n+      password: hashedPassword,\r\n+      role: 'super_admin',\r\n+    },\r\n+  });\r\n+\r\n+  await prisma.user.upsert({\r\n+    where: { email: 'franchise@gym.com' },\r\n+    update: {\r\n+      password: hashedPassword,\r\n+      role: 'franchise_admin',\r\n+      clubId: club.id,\r\n+    },\r\n+    create: {\r\n+      email: 'franchise@gym.com',\r\n+      password: hashedPassword,\r\n+      role: 'franchise_admin',\r\n+      clubId: club.id,\r\n+    },\r\n+  });\r\n+\r\n+  // 👇 Step 3: Create trainer\r\n+  const trainer = await prisma.trainer.upsert({\r\n+    where: { email: 'trainer@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      name: 'Jane Trainer',\r\n+      email: 'trainer@gym.com',\r\n+      clubId: club.id,\r\n+    },\r\n+  });\r\n+\r\n+  // 👇 Step 4: Seed membership plans\r\n+  await prisma.membershipPlan.createMany({\r\n+    data: [\r\n+      {\r\n+        name: 'Basic',\r\n+        description: 'Access to gym equipment and showers',\r\n+        price: 29.99,\r\n+        durationInDays: 30,\r\n+      },\r\n+      {\r\n+        name: 'Premium',\r\n+        description: 'Includes group classes, personal trainer access',\r\n+        price: 59.99,\r\n+        durationInDays: 30,\r\n+      },\r\n+      {\r\n+        name: 'Annual',\r\n+        description: 'Yearly membership with full benefits',\r\n+        price: 499.99,\r\n+        durationInDays: 365,\r\n+      },\r\n+    ],\r\n+    skipDuplicates: true,\r\n+  });\r\n+\r\n+  // 👇 Step 5: Seed class schedules\r\n+  await prisma.classSchedule.createMany({\r\n+    data: [\r\n+      {\r\n+        title: 'Morning Yoga',\r\n+        date: new Date('2025-07-15T08:00:00Z'),\r\n+        duration: 60,\r\n+        location: 'Room A',\r\n+        trainerId: trainer.id,\r\n+        clubId: club.id,\r\n+        maxCapacity: 20,\r\n+      },\r\n+      {\r\n+        title: 'HIIT Blast',\r\n+        date: new Date('2025-07-16T10:00:00Z'),\r\n+        duration: 45,\r\n+        location: 'Room B',\r\n+        trainerId: trainer.id,\r\n+        clubId: club.id,\r\n+        maxCapacity: 25,\r\n+      },\r\n+    ],\r\n+  });\r\n+\r\n+  console.log('✅ Seeded test club, users, trainer, plans, and schedules');\r\n+}\r\n+\r\n+\r\n+main()\r\n+  .catch((e) => {\r\n+    console.error(e);\r\n+    process.exit(1);\r\n+  })\r\n+  .finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1752406243882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,399 +116,4 @@\n     console.error(e);\r\n     process.exit(1);\r\n   })\r\n   .finally(() => prisma.$disconnect());\r\n-import { PrismaClient } from '@prisma/client';\r\n-import bcrypt from 'bcryptjs';\r\n-\r\n-const prisma = new PrismaClient();\r\n-\r\n-async function main() {\r\n-  const hashedPassword = await bcrypt.hash('password123', 10);\r\n-  const trainer = await prisma.trainer.findFirst(); // or create a dummy trainer\r\n-  const club = await prisma.club.findFirst();   \r\n-\r\n-  // 👇 Step 1: Create a dummy club\r\n-  const club = await prisma.club.upsert({\r\n-    where: { id: 'club1' },\r\n-    update: {},\r\n-    create: {\r\n-      id: 'club1',\r\n-      name: 'Golf Simulator',\r\n-      location: 'City Center'\r\n-    },\r\n-  });\r\n-\r\n-  // 👇 Step 2: Create users referencing that club\r\n-  // ✅ Step 2: Upsert super admin\r\n-await prisma.user.upsert({\r\n-  where: { email: 'super@gym.com' },\r\n-  update: {\r\n-    password: hashedPassword,\r\n-    role: 'super_admin',\r\n-    clubId: null,\r\n-  },\r\n-  create: {\r\n-    email: 'super@gym.com',\r\n-    password: hashedPassword,\r\n-    role: 'super_admin',\r\n-  },\r\n-});\r\n-\r\n-// ✅ Step 3: Upsert franchise admin\r\n-await prisma.user.upsert({\r\n-  where: { email: 'franchise@gym.com' },\r\n-  update: {\r\n-    password: hashedPassword,\r\n-    role: 'franchise_admin',\r\n-    clubId: club.id,\r\n-  },\r\n-  create: {\r\n-    email: 'franchise@gym.com',\r\n-    password: hashedPassword,\r\n-    role: 'franchise_admin',\r\n-    clubId: club.id,\r\n-  },\r\n-});\r\n-\r\n-//membership plans\r\n-\r\n-  await prisma.membershipPlan.createMany({\r\n-    data: [\r\n-      {\r\n-        name: 'Basic',\r\n-        description: 'Access to gym equipment and showers',\r\n-        price: 29.99,\r\n-        durationInDays: 30,\r\n-      },\r\n-      {\r\n-        name: 'Premium',\r\n-        description: 'Includes group classes, personal trainer access',\r\n-        price: 59.99,\r\n-        durationInDays: 30,\r\n-      },\r\n-      {\r\n-        name: 'Annual',\r\n-        description: 'Yearly membership with full benefits',\r\n-        price: 499.99,\r\n-        durationInDays: 365,\r\n-      },\r\n-    ],\r\n-    skipDuplicates: true,\r\n-  });\r\n-\r\n-\r\n-  // 👇 Step 3: Create a trainer linked to the club\r\n-  await prisma.trainer.upsert({\r\n-    where: { email: 'trainer@gym.com' },\r\n-    update: {},\r\n-    create: {\r\n-      name: 'Jane Trainer',\r\n-      email: 'trainer@gym.com',\r\n-      clubId: club.id\r\n-    },\r\n-  });\r\n-\r\n-  console.log('✅ Seeded test club, users, and trainer');\r\n-}\r\n-\r\n-\r\n-//make schedules\r\n-\r\n-if (!trainer || !club) throw new Error('Missing trainer or club');\r\n-  await prisma.classSchedule.createMany({\r\n-    data: [\r\n-      {\r\n-        title: 'Morning Yoga',\r\n-        date: new Date('2025-07-15T08:00:00Z'),\r\n-        duration: 60,\r\n-        location: 'Room A',\r\n-        trainerId: trainer.id,\r\n-        clubId: club.id,\r\n-        maxCapacity: 20,\r\n-      },\r\n-      {\r\n-        title: 'HIIT Blast',\r\n-        date: new Date('2025-07-16T10:00:00Z'),\r\n-        duration: 45,\r\n-        location: 'Room B',\r\n-        trainerId: trainer.id,\r\n-        clubId: club.id,\r\n-        maxCapacity: 25,\r\n-      },\r\n-    ],\r\n-  });\r\n-\r\n-  console.log('✅ Seeded class schedules.');\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-main()\r\n-  .catch((e) => {\r\n-    console.error(e);\r\n-    process.exit(1);\r\n-  })\r\n-  .finally(() => prisma.$disconnect());\r\n-import { PrismaClient } from '@prisma/client';\r\n-import bcrypt from 'bcryptjs';\r\n-\r\n-const prisma = new PrismaClient();\r\n-\r\n-async function main() {\r\n-  const hashedPassword = await bcrypt.hash('password123', 10);\r\n-  const trainer = await prisma.trainer.findFirst(); // or create a dummy trainer\r\n-  const club = await prisma.club.findFirst();   \r\n-\r\n-  // 👇 Step 1: Create a dummy club\r\n-  const club = await prisma.club.upsert({\r\n-    where: { id: 'club1' },\r\n-    update: {},\r\n-    create: {\r\n-      id: 'club1',\r\n-      name: 'Golf Simulator',\r\n-      location: 'City Center'\r\n-    },\r\n-  });\r\n-\r\n-  // 👇 Step 2: Create users referencing that club\r\n-  // ✅ Step 2: Upsert super admin\r\n-await prisma.user.upsert({\r\n-  where: { email: 'super@gym.com' },\r\n-  update: {\r\n-    password: hashedPassword,\r\n-    role: 'super_admin',\r\n-    clubId: null,\r\n-  },\r\n-  create: {\r\n-    email: 'super@gym.com',\r\n-    password: hashedPassword,\r\n-    role: 'super_admin',\r\n-  },\r\n-});\r\n-\r\n-// ✅ Step 3: Upsert franchise admin\r\n-await prisma.user.upsert({\r\n-  where: { email: 'franchise@gym.com' },\r\n-  update: {\r\n-    password: hashedPassword,\r\n-    role: 'franchise_admin',\r\n-    clubId: club.id,\r\n-  },\r\n-  create: {\r\n-    email: 'franchise@gym.com',\r\n-    password: hashedPassword,\r\n-    role: 'franchise_admin',\r\n-    clubId: club.id,\r\n-  },\r\n-});\r\n-\r\n-//membership plans\r\n-\r\n-  await prisma.membershipPlan.createMany({\r\n-    data: [\r\n-      {\r\n-        name: 'Basic',\r\n-        description: 'Access to gym equipment and showers',\r\n-        price: 29.99,\r\n-        durationInDays: 30,\r\n-      },\r\n-      {\r\n-        name: 'Premium',\r\n-        description: 'Includes group classes, personal trainer access',\r\n-        price: 59.99,\r\n-        durationInDays: 30,\r\n-      },\r\n-      {\r\n-        name: 'Annual',\r\n-        description: 'Yearly membership with full benefits',\r\n-        price: 499.99,\r\n-        durationInDays: 365,\r\n-      },\r\n-    ],\r\n-    skipDuplicates: true,\r\n-  });\r\n-\r\n-\r\n-  // 👇 Step 3: Create a trainer linked to the club\r\n-  await prisma.trainer.upsert({\r\n-    where: { email: 'trainer@gym.com' },\r\n-    update: {},\r\n-    create: {\r\n-      name: 'Jane Trainer',\r\n-      email: 'trainer@gym.com',\r\n-      clubId: club.id\r\n-    },\r\n-  });\r\n-\r\n-  console.log('✅ Seeded test club, users, and trainer');\r\n-}\r\n-\r\n-\r\n-//make schedules\r\n-\r\n-if (!trainer || !club) throw new Error('Missing trainer or club');\r\n-  await prisma.classSchedule.createMany({\r\n-    data: [\r\n-      {\r\n-        title: 'Morning Yoga',\r\n-        date: new Date('2025-07-15T08:00:00Z'),\r\n-        duration: 60,\r\n-        location: 'Room A',\r\n-        trainerId: trainer.id,\r\n-        clubId: club.id,\r\n-        maxCapacity: 20,\r\n-      },\r\n-      {\r\n-        title: 'HIIT Blast',\r\n-        date: new Date('2025-07-16T10:00:00Z'),\r\n-        duration: 45,\r\n-        location: 'Room B',\r\n-        trainerId: trainer.id,\r\n-        clubId: club.id,\r\n-        maxCapacity: 25,\r\n-      },\r\n-    ],\r\n-  });\r\n-\r\n-  console.log('✅ Seeded class schedules.');\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-main()\r\n-  .catch((e) => {\r\n-    console.error(e);\r\n-    process.exit(1);\r\n-  })\r\n-  .finally(() => prisma.$disconnect());\r\n-import { PrismaClient } from '@prisma/client';\r\n-import bcrypt from 'bcryptjs';\r\n-\r\n-const prisma = new PrismaClient();\r\n-\r\n-async function main() {\r\n-  const hashedPassword = await bcrypt.hash('password123', 10);\r\n-\r\n-  // 👇 Step 1: Create a dummy club\r\n-  const club = await prisma.club.upsert({\r\n-    where: { id: 'club1' },\r\n-    update: {},\r\n-    create: {\r\n-      id: 'club1',\r\n-      name: 'Golf Simulator',\r\n-      location: 'City Center'\r\n-    },\r\n-  });\r\n-\r\n-  // 👇 Step 2: Create users referencing that club\r\n-  // ✅ Step 2: Upsert super admin\r\n-await prisma.user.upsert({\r\n-  where: { email: 'super@gym.com' },\r\n-  update: {\r\n-    password: hashedPassword,\r\n-    role: 'super_admin',\r\n-    clubId: null,\r\n-  },\r\n-  create: {\r\n-    email: 'super@gym.com',\r\n-    password: hashedPassword,\r\n-    role: 'super_admin',\r\n-  },\r\n-});\r\n-\r\n-// ✅ Step 3: Upsert franchise admin\r\n-await prisma.user.upsert({\r\n-  where: { email: 'franchise@gym.com' },\r\n-  update: {\r\n-    password: hashedPassword,\r\n-    role: 'franchise_admin',\r\n-    clubId: club.id,\r\n-  },\r\n-  create: {\r\n-    email: 'franchise@gym.com',\r\n-    password: hashedPassword,\r\n-    role: 'franchise_admin',\r\n-    clubId: club.id,\r\n-  },\r\n-});\r\n-\r\n-\r\n-  // 👇 Step 3: Create a trainer linked to the club\r\n-  await prisma.trainer.upsert({\r\n-    where: { email: 'trainer@gym.com' },\r\n-    update: {},\r\n-    create: {\r\n-      name: 'Jane Trainer',\r\n-      email: 'trainer@gym.com',\r\n-      clubId: club.id\r\n-    },\r\n-  });\r\n-\r\n-  console.log('✅ Seeded test club, users, and trainer');\r\n-}\r\n-\r\n-main()\r\n-  .catch((e) => {\r\n-    console.error(e);\r\n-    process.exit(1);\r\n-  })\r\n-  .finally(() => prisma.$disconnect());\r\n-import { PrismaClient } from '@prisma/client';\r\n-import bcrypt from 'bcryptjs';\r\n-\r\n-const prisma = new PrismaClient();\r\n-\r\n-async function main() {\r\n-  const hashedPassword = await bcrypt.hash('password123', 10);\r\n-\r\n-  // 👇 Step 1: Create a dummy club\r\n-  const club = await prisma.club.upsert({\r\n-    where: { id: 'club1' },\r\n-    update: {},\r\n-    create: {\r\n-      id: 'club1',\r\n-      name: 'Golf Simulator',\r\n-      location: 'City Center'\r\n-    },\r\n-  });\r\n-\r\n-  // 👇 Step 2: Create users referencing that club\r\n-  await prisma.user.createMany({\r\n-    data: [\r\n-      {\r\n-        email: 'super@gym.com',\r\n-        password: hashedPassword,\r\n-        role: 'super_admin',\r\n-      },\r\n-      {\r\n-        email: 'franchise@gym.com',\r\n-        password: hashedPassword,\r\n-        role: 'franchise_admin',\r\n-        clubId: club.id,\r\n-      }\r\n-    ],\r\n-    skipDuplicates: true,\r\n-  });\r\n-\r\n-  // 👇 Step 3: Create a trainer linked to the club\r\n-  await prisma.trainer.upsert({\r\n-    where: { email: 'trainer@gym.com' },\r\n-    update: {},\r\n-    create: {\r\n-      name: 'Jane Trainer',\r\n-      email: 'trainer@gym.com',\r\n-      clubId: club.id\r\n-    },\r\n-  });\r\n-\r\n-  console.log('✅ Seeded test club, users, and trainer');\r\n-}\r\n-\r\n-main()\r\n-  .catch((e) => {\r\n-    console.error(e);\r\n-    process.exit(1);\r\n-  })\r\n-  .finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1752420150143,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \r\n const prisma = new PrismaClient();\r\n \r\n async function main() {\r\n-const hashedPassword = await bcrypt.hash('password123', 10);\r\n+  const hashedPassword = await bcrypt.hash('password123', 10);\r\n \r\n   // 👇 Step 1: Upsert club\r\n   const club = await prisma.club.upsert({\r\n     where: { id: 'club1' },\r\n@@ -46,18 +46,38 @@\n       clubId: club.id,\r\n     },\r\n   });\r\n \r\n-  // 👇 Step 3: Create trainer\r\n-  const trainer = await prisma.trainer.upsert({\r\n-    where: { email: 'trainer@gym.com' },\r\n-    update: {},\r\n-    create: {\r\n-      name: 'Jane Trainer',\r\n-      email: 'trainer@gym.com',\r\n-      clubId: club.id,\r\n-    },\r\n-  });\r\n+  // 👇 Step 3: Upsert multiple trainers\r\n+  const trainers = await Promise.all([\r\n+    prisma.trainer.upsert({\r\n+      where: { email: 'trainer1@gym.com' },\r\n+      update: {},\r\n+      create: {\r\n+        name: 'Mike Bell',\r\n+        email: 'trainer1@gym.com',\r\n+        clubId: club.id,\r\n+      },\r\n+    }),\r\n+    prisma.trainer.upsert({\r\n+      where: { email: 'trainer2@gym.com' },\r\n+      update: {},\r\n+      create: {\r\n+        name: 'Alyssa Kathan',\r\n+        email: 'trainer2@gym.com',\r\n+        clubId: club.id,\r\n+      },\r\n+    }),\r\n+    prisma.trainer.upsert({\r\n+      where: { email: 'trainer3@gym.com' },\r\n+      update: {},\r\n+      create: {\r\n+        name: 'Jordan Sparks',\r\n+        email: 'trainer3@gym.com',\r\n+        clubId: club.id,\r\n+      },\r\n+    }),\r\n+  ]);\r\n \r\n   // 👇 Step 4: Seed membership plans\r\n   await prisma.membershipPlan.createMany({\r\n     data: [\r\n@@ -82,36 +102,44 @@\n     ],\r\n     skipDuplicates: true,\r\n   });\r\n \r\n-  // 👇 Step 5: Seed class schedules\r\n+  // 👇 Step 5: Seed class schedules for all trainers\r\n   await prisma.classSchedule.createMany({\r\n     data: [\r\n       {\r\n         title: 'Morning Yoga',\r\n         date: new Date('2025-07-15T08:00:00Z'),\r\n         duration: 60,\r\n         location: 'Room A',\r\n-        trainerId: trainer.id,\r\n+        trainerId: trainers[0].id,\r\n         clubId: club.id,\r\n         maxCapacity: 20,\r\n       },\r\n       {\r\n         title: 'HIIT Blast',\r\n-        date: new Date('2025-07-16T10:00:00Z'),\r\n+        date: new Date('2025-07-15T10:00:00Z'),\r\n         duration: 45,\r\n         location: 'Room B',\r\n-        trainerId: trainer.id,\r\n+        trainerId: trainers[1].id,\r\n         clubId: club.id,\r\n         maxCapacity: 25,\r\n       },\r\n+      {\r\n+        title: 'Evening Stretch',\r\n+        date: new Date('2025-07-15T18:00:00Z'),\r\n+        duration: 30,\r\n+        location: 'Room C',\r\n+        trainerId: trainers[2].id,\r\n+        clubId: club.id,\r\n+        maxCapacity: 15,\r\n+      },\r\n     ],\r\n   });\r\n \r\n-  console.log('✅ Seeded test club, users, trainer, plans, and schedules');\r\n+  console.log('✅ Seeded club, users, 3 trainers, membership plans, and schedules');\r\n }\r\n \r\n-\r\n main()\r\n   .catch((e) => {\r\n     console.error(e);\r\n     process.exit(1);\r\n"
                },
                {
                    "date": 1752440971446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,8 +135,18 @@\n       },\r\n     ],\r\n   });\r\n \r\n+  await prisma.location.createMany({\r\n+  data: [\r\n+    { name: 'Room A', clubId: club.id },\r\n+    { name: 'Room B', clubId: club.id },\r\n+    { name: 'Studio 1', clubId: club.id },\r\n+  ],\r\n+  skipDuplicates: true,\r\n+});\r\n+\r\n+\r\n   console.log('✅ Seeded club, users, 3 trainers, membership plans, and schedules');\r\n }\r\n \r\n main()\r\n"
                },
                {
                    "date": 1752443033560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,39 +103,39 @@\n     skipDuplicates: true,\r\n   });\r\n \r\n   // 👇 Step 5: Seed class schedules for all trainers\r\n-  await prisma.classSchedule.createMany({\r\n-    data: [\r\n-      {\r\n-        title: 'Morning Yoga',\r\n-        date: new Date('2025-07-15T08:00:00Z'),\r\n-        duration: 60,\r\n-        location: 'Room A',\r\n-        trainerId: trainers[0].id,\r\n-        clubId: club.id,\r\n-        maxCapacity: 20,\r\n-      },\r\n-      {\r\n-        title: 'HIIT Blast',\r\n-        date: new Date('2025-07-15T10:00:00Z'),\r\n-        duration: 45,\r\n-        location: 'Room B',\r\n-        trainerId: trainers[1].id,\r\n-        clubId: club.id,\r\n-        maxCapacity: 25,\r\n-      },\r\n-      {\r\n-        title: 'Evening Stretch',\r\n-        date: new Date('2025-07-15T18:00:00Z'),\r\n-        duration: 30,\r\n-        location: 'Room C',\r\n-        trainerId: trainers[2].id,\r\n-        clubId: club.id,\r\n-        maxCapacity: 15,\r\n-      },\r\n-    ],\r\n-  });\r\n+  // await prisma.classSchedule.createMany({\r\n+  //   data: [\r\n+  //     {\r\n+  //       title: 'Morning Yoga',\r\n+  //       date: new Date('2025-07-15T08:00:00Z'),\r\n+  //       duration: 60,\r\n+  //       location: 'Room A',\r\n+  //       trainerId: trainers[0].id,\r\n+  //       clubId: club.id,\r\n+  //       maxCapacity: 20,\r\n+  //     },\r\n+  //     {\r\n+  //       title: 'HIIT Blast',\r\n+  //       date: new Date('2025-07-15T10:00:00Z'),\r\n+  //       duration: 45,\r\n+  //       location: 'Room B',\r\n+  //       trainerId: trainers[1].id,\r\n+  //       clubId: club.id,\r\n+  //       maxCapacity: 25,\r\n+  //     },\r\n+  //     {\r\n+  //       title: 'Evening Stretch',\r\n+  //       date: new Date('2025-07-15T18:00:00Z'),\r\n+  //       duration: 30,\r\n+  //       location: 'Room C',\r\n+  //       trainerId: trainers[2].id,\r\n+  //       clubId: club.id,\r\n+  //       maxCapacity: 15,\r\n+  //     },\r\n+  //   ],\r\n+  // });\r\n \r\n   await prisma.location.createMany({\r\n   data: [\r\n     { name: 'Room A', clubId: club.id },\r\n"
                },
                {
                    "date": 1752443158809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,41 +102,10 @@\n     ],\r\n     skipDuplicates: true,\r\n   });\r\n \r\n-  // 👇 Step 5: Seed class schedules for all trainers\r\n-  // await prisma.classSchedule.createMany({\r\n-  //   data: [\r\n-  //     {\r\n-  //       title: 'Morning Yoga',\r\n-  //       date: new Date('2025-07-15T08:00:00Z'),\r\n-  //       duration: 60,\r\n-  //       location: 'Room A',\r\n-  //       trainerId: trainers[0].id,\r\n-  //       clubId: club.id,\r\n-  //       maxCapacity: 20,\r\n-  //     },\r\n-  //     {\r\n-  //       title: 'HIIT Blast',\r\n-  //       date: new Date('2025-07-15T10:00:00Z'),\r\n-  //       duration: 45,\r\n-  //       location: 'Room B',\r\n-  //       trainerId: trainers[1].id,\r\n-  //       clubId: club.id,\r\n-  //       maxCapacity: 25,\r\n-  //     },\r\n-  //     {\r\n-  //       title: 'Evening Stretch',\r\n-  //       date: new Date('2025-07-15T18:00:00Z'),\r\n-  //       duration: 30,\r\n-  //       location: 'Room C',\r\n-  //       trainerId: trainers[2].id,\r\n-  //       clubId: club.id,\r\n-  //       maxCapacity: 15,\r\n-  //     },\r\n-  //   ],\r\n-  // });\r\n \r\n+\r\n   await prisma.location.createMany({\r\n   data: [\r\n     { name: 'Room A', clubId: club.id },\r\n     { name: 'Room B', clubId: club.id },\r\n"
                },
                {
                    "date": 1752484326428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,8 +114,22 @@\n   skipDuplicates: true,\r\n });\r\n \r\n \r\n+await prisma.classSchedule.create({\r\n+  data: {\r\n+    title: 'Bootcamp Monday',\r\n+    date: new Date(), // use today's date for easier testing\r\n+    duration: 60,\r\n+    location: 'Room A',\r\n+    trainerId: trainers[0].id, // links to Mike Bell\r\n+    maxCapacity: 20,\r\n+    clubId: club.id,\r\n+  },\r\n+});\r\n+\r\n+\r\n+\r\n   console.log('✅ Seeded club, users, 3 trainers, membership plans, and schedules');\r\n }\r\n \r\n main()\r\n"
                },
                {
                    "date": 1752484345482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,22 +114,12 @@\n   skipDuplicates: true,\r\n });\r\n \r\n \r\n-await prisma.classSchedule.create({\r\n-  data: {\r\n-    title: 'Bootcamp Monday',\r\n-    date: new Date(), // use today's date for easier testing\r\n-    duration: 60,\r\n-    location: 'Room A',\r\n-    trainerId: trainers[0].id, // links to Mike Bell\r\n-    maxCapacity: 20,\r\n-    clubId: club.id,\r\n-  },\r\n-});\r\n \r\n \r\n \r\n+\r\n   console.log('✅ Seeded club, users, 3 trainers, membership plans, and schedules');\r\n }\r\n \r\n main()\r\n"
                },
                {
                    "date": 1752540397201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,8 +121,10 @@\n \r\n   console.log('✅ Seeded club, users, 3 trainers, membership plans, and schedules');\r\n }\r\n \r\n+//rest is  created manually like member, invoice, .. etc\r\n+\r\n main()\r\n   .catch((e) => {\r\n     console.error(e);\r\n     process.exit(1);\r\n"
                },
                {
                    "date": 1752573238925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,130 +1,51 @@\n+\r\n+// ⚠️ Dev seed only. NEVER run this in production.\r\n+\r\n import { PrismaClient } from '@prisma/client';\r\n import bcrypt from 'bcryptjs';\r\n \r\n const prisma = new PrismaClient();\r\n \r\n async function main() {\r\n   const hashedPassword = await bcrypt.hash('password123', 10);\r\n \r\n-  // 👇 Step 1: Upsert club\r\n-  const club = await prisma.club.upsert({\r\n-    where: { id: 'club1' },\r\n-    update: {},\r\n-    create: {\r\n-      id: 'club1',\r\n-      name: 'Golf Simulator',\r\n-      location: 'City Center',\r\n-    },\r\n-  });\r\n+ \r\n \r\n-  // 👇 Step 2: Upsert users\r\n-  await prisma.user.upsert({\r\n-    where: { email: 'super@gym.com' },\r\n-    update: {\r\n-      password: hashedPassword,\r\n-      role: 'super_admin',\r\n-      clubId: null,\r\n-    },\r\n-    create: {\r\n-      email: 'super@gym.com',\r\n-      password: hashedPassword,\r\n-      role: 'super_admin',\r\n-    },\r\n-  });\r\n+const club = await prisma.club.upsert({\r\n+  where: { id: 'club1' },\r\n+  update: {},\r\n+  create: {\r\n+    id: 'club1',\r\n+    name: 'Test Gym',\r\n+    location: 'Demo City',\r\n+    timezone: 'America/Chicago',\r\n+    clubEmail: 'testclub@gymfitness.com',\r\n+  },\r\n+});\r\n \r\n-  await prisma.user.upsert({\r\n-    where: { email: 'franchise@gym.com' },\r\n-    update: {\r\n-      password: hashedPassword,\r\n-      role: 'franchise_admin',\r\n-      clubId: club.id,\r\n-    },\r\n-    create: {\r\n-      email: 'franchise@gym.com',\r\n-      password: hashedPassword,\r\n-      role: 'franchise_admin',\r\n-      clubId: club.id,\r\n-    },\r\n-  });\r\n+await prisma.user.upsert({\r\n+  where: { email: 'super@gym.com' },\r\n+  update: {},\r\n+  create: {\r\n+    email: 'super@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'super_admin',\r\n+  },\r\n+});\r\n \r\n-  // 👇 Step 3: Upsert multiple trainers\r\n-  const trainers = await Promise.all([\r\n-    prisma.trainer.upsert({\r\n-      where: { email: 'trainer1@gym.com' },\r\n-      update: {},\r\n-      create: {\r\n-        name: 'Mike Bell',\r\n-        email: 'trainer1@gym.com',\r\n-        clubId: club.id,\r\n-      },\r\n-    }),\r\n-    prisma.trainer.upsert({\r\n-      where: { email: 'trainer2@gym.com' },\r\n-      update: {},\r\n-      create: {\r\n-        name: 'Alyssa Kathan',\r\n-        email: 'trainer2@gym.com',\r\n-        clubId: club.id,\r\n-      },\r\n-    }),\r\n-    prisma.trainer.upsert({\r\n-      where: { email: 'trainer3@gym.com' },\r\n-      update: {},\r\n-      create: {\r\n-        name: 'Jordan Sparks',\r\n-        email: 'trainer3@gym.com',\r\n-        clubId: club.id,\r\n-      },\r\n-    }),\r\n-  ]);\r\n-\r\n-  // 👇 Step 4: Seed membership plans\r\n-  await prisma.membershipPlan.createMany({\r\n-    data: [\r\n-      {\r\n-        name: 'Basic',\r\n-        description: 'Access to gym equipment and showers',\r\n-        price: 29.99,\r\n-        durationInDays: 30,\r\n-      },\r\n-      {\r\n-        name: 'Premium',\r\n-        description: 'Includes group classes, personal trainer access',\r\n-        price: 59.99,\r\n-        durationInDays: 30,\r\n-      },\r\n-      {\r\n-        name: 'Annual',\r\n-        description: 'Yearly membership with full benefits',\r\n-        price: 499.99,\r\n-        durationInDays: 365,\r\n-      },\r\n-    ],\r\n-    skipDuplicates: true,\r\n-  });\r\n-\r\n-\r\n-\r\n-  await prisma.location.createMany({\r\n-  data: [\r\n-    { name: 'Room A', clubId: club.id },\r\n-    { name: 'Room B', clubId: club.id },\r\n-    { name: 'Studio 1', clubId: club.id },\r\n-  ],\r\n-  skipDuplicates: true,\r\n+await prisma.user.upsert({\r\n+  where: { email: 'franchise@gym.com' },\r\n+  update: {},\r\n+  create: {\r\n+    email: 'franchise@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'franchise_admin',\r\n+    clubId: club.id,\r\n+  },\r\n });\r\n \r\n \r\n-\r\n-\r\n-\r\n-\r\n-  console.log('✅ Seeded club, users, 3 trainers, membership plans, and schedules');\r\n-}\r\n-\r\n-//rest is  created manually like member, invoice, .. etc\r\n-\r\n main()\r\n   .catch((e) => {\r\n     console.error(e);\r\n     process.exit(1);\r\n"
                },
                {
                    "date": 1752573329387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,10 +42,10 @@\n     role: 'franchise_admin',\r\n     clubId: club.id,\r\n   },\r\n });\r\n+}\r\n \r\n-\r\n main()\r\n   .catch((e) => {\r\n     console.error(e);\r\n     process.exit(1);\r\n"
                },
                {
                    "date": 1752576827039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,11 +39,23 @@\n   create: {\r\n     email: 'franchise@gym.com',\r\n     password: hashedPassword,\r\n     role: 'franchise_admin',\r\n-    clubId: club.id,\r\n+    clubId: null,\r\n   },\r\n });\r\n+\r\n+await prisma.user.upsert({\r\n+  where: { email: 'franchise2@gym.com' },\r\n+  update: {},\r\n+  create: {\r\n+    email: 'franchise2@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'franchise_admin',\r\n+    clubId: null,\r\n+  },\r\n+});\r\n+\r\n }\r\n \r\n main()\r\n   .catch((e) => {\r\n"
                },
                {
                    "date": 1752579149220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,28 @@\n     clubId: null,\r\n   },\r\n });\r\n \r\n+await prisma.trainer.createMany({\r\n+  data: [\r\n+    {\r\n+      name: 'Alyssa Kathan',\r\n+      email: 'alyssa@gym.com',\r\n+      specialization: 'Strength Training',\r\n+      clubId: club.id,\r\n+    },\r\n+    {\r\n+      name: 'Jordan Sparks',\r\n+      email: 'jordan@gym.com',\r\n+      specialization: 'HIIT & Cardio',\r\n+      clubId: club.id,\r\n+    },\r\n+  ],\r\n+  skipDuplicates: true,\r\n+});\r\n+\r\n+\r\n+\r\n }\r\n \r\n main()\r\n   .catch((e) => {\r\n"
                },
                {
                    "date": 1752579597973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,14 +60,16 @@\n     {\r\n       name: 'Alyssa Kathan',\r\n       email: 'alyssa@gym.com',\r\n       specialization: 'Strength Training',\r\n+      phone: '123-456-7890',\r\n       clubId: club.id,\r\n     },\r\n     {\r\n       name: 'Jordan Sparks',\r\n       email: 'jordan@gym.com',\r\n       specialization: 'HIIT & Cardio',\r\n+      phone: '987-654-3210',\r\n       clubId: club.id,\r\n     },\r\n   ],\r\n   skipDuplicates: true,\r\n"
                },
                {
                    "date": 1752598020433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,119 @@\n+\r\n+// ⚠️ Dev seed only. NEVER run this in production.\r\n+\r\n+import { PrismaClient } from '@prisma/client';\r\n+import bcrypt from 'bcryptjs';\r\n+\r\n+const prisma = new PrismaClient();\r\n+\r\n+async function main() {\r\n+  const hashedPassword = await bcrypt.hash('password123', 10);\r\n+\r\n+ \r\n+\r\n+const club = await prisma.club.upsert({\r\n+  where: { id: 'club1' },\r\n+  update: {},\r\n+  create: {\r\n+    id: 'club1',\r\n+    name: 'Test Gym',\r\n+    location: 'Demo City',\r\n+    timezone: 'America/Chicago',\r\n+    clubEmail: 'testclub@gymfitness.com',\r\n+  },\r\n+});\r\n+\r\n+await prisma.user.upsert({\r\n+  where: { email: 'super@gym.com' },\r\n+  update: {},\r\n+  create: {\r\n+    email: 'super@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'super_admin',\r\n+  },\r\n+});\r\n+\r\n+await prisma.user.upsert({\r\n+  where: { email: 'franchise@gym.com' },\r\n+  update: {},\r\n+  create: {\r\n+    email: 'franchise@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'franchise_admin',\r\n+    clubId: null,\r\n+  },\r\n+});\r\n+\r\n+await prisma.user.upsert({\r\n+  where: { email: 'franchise2@gym.com' },\r\n+  update: {},\r\n+  create: {\r\n+    email: 'franchise2@gym.com',\r\n+    password: hashedPassword,\r\n+    role: 'franchise_admin',\r\n+    clubId: null,\r\n+  },\r\n+});\r\n+\r\n+await prisma.trainer.createMany({\r\n+  data: [\r\n+    {\r\n+      name: 'Alyssa Kathan',\r\n+      email: 'alyssa@gym.com',\r\n+      specialization: 'Strength Training',\r\n+      phone: '123-456-7890',\r\n+      clubId: club.id,\r\n+    },\r\n+    {\r\n+      name: 'Jordan Sparks',\r\n+      email: 'jordan@gym.com',\r\n+      specialization: 'HIIT & Cardio',\r\n+      phone: '987-654-3210',\r\n+      clubId: club.id,\r\n+    },\r\n+  ],\r\n+  skipDuplicates: true,\r\n+});\r\n+\r\n+\r\n+\r\n+\r\n+const roles = ['super_admin', 'franchise_admin', 'trainer', 'staff'] as const;\r\n+  const keys = [\r\n+    'view_members',\r\n+    'edit_members',\r\n+    'view_reports',\r\n+    'edit_schedule',\r\n+    'manage_billing',\r\n+    'assign_trainers',\r\n+  ] as const;\r\n+\r\n+  for (const role of roles) {\r\n+    for (const key of keys) {\r\n+      await prisma.permission.upsert({\r\n+        where: {\r\n+          role_key: {\r\n+            role,\r\n+            key,\r\n+          },\r\n+        },\r\n+        update: {},\r\n+        create: {\r\n+          role,\r\n+          key,\r\n+          allowed: role === 'super_admin', // Default: only super_admin gets all initially\r\n+        },\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  console.log('✅ Seed complete: users, trainers, permissions, club.');\r\n+}\r\n+\r\n+\r\n+main()\r\n+  .catch((e) => {\r\n+    console.error(e);\r\n+    process.exit(1);\r\n+  })\r\n+  .finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1752619205277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,8 +106,19 @@\n       });\r\n     }\r\n   }\r\n \r\n+  await prisma.trainingResource.create({\r\n+  data: {\r\n+    title: 'How to Check In Members',\r\n+    description: 'This guide explains member check-in flow',\r\n+    type: 'video',\r\n+    videoUrl: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\r\n+    roles: ['franchise_admin', 'staff'],\r\n+    tags: ['checkin', 'operations'],\r\n+  },\r\n+});\r\n+\r\n   console.log('✅ Seed complete: users, trainers, permissions, club.');\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1752623664887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,8 +117,20 @@\n     tags: ['checkin', 'operations'],\r\n   },\r\n });\r\n \r\n+await prisma.trainingResource.create({\r\n+  data: {\r\n+    title: 'Gym SOP PDF',\r\n+    description: 'Standard Operating Procedures for staff',\r\n+    type: 'document',\r\n+    fileUrl: '/uploads/gym-sop.pdf',\r\n+    tags: ['operations', 'safety'],\r\n+    roles: ['staff', 'trainer'],\r\n+  },\r\n+});\r\n+\r\n+\r\n   console.log('✅ Seed complete: users, trainers, permissions, club.');\r\n }\r\n \r\n \r\n"
                },
                {
                    "date": 1752623786498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n   data: {\r\n     title: 'How to Check In Members',\r\n     description: 'This guide explains member check-in flow',\r\n     type: 'video',\r\n-    videoUrl: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\r\n+    videoUrl: 'https://www.youtube.com/watch?v=I2JM92yfs7g&list=RDI2JM92yfs7g&start_radio=1&ab_channel=90%27sDard-BollywoodSongs',\r\n     roles: ['franchise_admin', 'staff'],\r\n     tags: ['checkin', 'operations'],\r\n   },\r\n });\r\n"
                },
                {
                    "date": 1752750377056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,91 +139,4 @@\n     console.error(e);\r\n     process.exit(1);\r\n   })\r\n   .finally(() => prisma.$disconnect());\r\n-\r\n-// ⚠️ Dev seed only. NEVER run this in production.\r\n-\r\n-import { PrismaClient } from '@prisma/client';\r\n-import bcrypt from 'bcryptjs';\r\n-\r\n-const prisma = new PrismaClient();\r\n-\r\n-async function main() {\r\n-  const hashedPassword = await bcrypt.hash('password123', 10);\r\n-\r\n- \r\n-\r\n-const club = await prisma.club.upsert({\r\n-  where: { id: 'club1' },\r\n-  update: {},\r\n-  create: {\r\n-    id: 'club1',\r\n-    name: 'Test Gym',\r\n-    location: 'Demo City',\r\n-    timezone: 'America/Chicago',\r\n-    clubEmail: 'testclub@gymfitness.com',\r\n-  },\r\n-});\r\n-\r\n-await prisma.user.upsert({\r\n-  where: { email: 'super@gym.com' },\r\n-  update: {},\r\n-  create: {\r\n-    email: 'super@gym.com',\r\n-    password: hashedPassword,\r\n-    role: 'super_admin',\r\n-  },\r\n-});\r\n-\r\n-await prisma.user.upsert({\r\n-  where: { email: 'franchise@gym.com' },\r\n-  update: {},\r\n-  create: {\r\n-    email: 'franchise@gym.com',\r\n-    password: hashedPassword,\r\n-    role: 'franchise_admin',\r\n-    clubId: null,\r\n-  },\r\n-});\r\n-\r\n-await prisma.user.upsert({\r\n-  where: { email: 'franchise2@gym.com' },\r\n-  update: {},\r\n-  create: {\r\n-    email: 'franchise2@gym.com',\r\n-    password: hashedPassword,\r\n-    role: 'franchise_admin',\r\n-    clubId: null,\r\n-  },\r\n-});\r\n-\r\n-await prisma.trainer.createMany({\r\n-  data: [\r\n-    {\r\n-      name: 'Alyssa Kathan',\r\n-      email: 'alyssa@gym.com',\r\n-      specialization: 'Strength Training',\r\n-      phone: '123-456-7890',\r\n-      clubId: club.id,\r\n-    },\r\n-    {\r\n-      name: 'Jordan Sparks',\r\n-      email: 'jordan@gym.com',\r\n-      specialization: 'HIIT & Cardio',\r\n-      phone: '987-654-3210',\r\n-      clubId: club.id,\r\n-    },\r\n-  ],\r\n-  skipDuplicates: true,\r\n-});\r\n-\r\n-\r\n-\r\n-}\r\n-\r\n-main()\r\n-  .catch((e) => {\r\n-    console.error(e);\r\n-    process.exit(1);\r\n-  })\r\n-  .finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1753165907020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,142 +1,44 @@\n \r\n // ⚠️ Dev seed only. NEVER run this in production.\r\n \r\n+// prisma/seed.ts\r\n import { PrismaClient } from '@prisma/client';\r\n-import bcrypt from 'bcryptjs';\r\n-\r\n const prisma = new PrismaClient();\r\n \r\n async function main() {\r\n-  const hashedPassword = await bcrypt.hash('password123', 10);\r\n+  console.log('🌱 Seeding: Super Admin...');\r\n \r\n- \r\n+  // Optional: create a default club for this super admin to be associated with\r\n+  const defaultClub = await prisma.club.create({\r\n+    data: {\r\n+      name: 'Gym Fitness HQ',\r\n+      location: 'New York, NY',\r\n+      timezone: 'America/New_York',\r\n+      clubEmail: 'hq@gymfitness.com',\r\n+      status: 'active',\r\n+    },\r\n+  });\r\n \r\n-const club = await prisma.club.upsert({\r\n-  where: { id: 'club1' },\r\n-  update: {},\r\n-  create: {\r\n-    id: 'club1',\r\n-    name: 'Test Gym',\r\n-    location: 'Demo City',\r\n-    timezone: 'America/Chicago',\r\n-    clubEmail: 'testclub@gymfitness.com',\r\n-  },\r\n-});\r\n-\r\n-await prisma.user.upsert({\r\n-  where: { email: 'super@gym.com' },\r\n-  update: {},\r\n-  create: {\r\n-    email: 'super@gym.com',\r\n-    password: hashedPassword,\r\n-    role: 'super_admin',\r\n-  },\r\n-});\r\n-\r\n-await prisma.user.upsert({\r\n-  where: { email: 'franchise@gym.com' },\r\n-  update: {},\r\n-  create: {\r\n-    email: 'franchise@gym.com',\r\n-    password: hashedPassword,\r\n-    role: 'franchise_admin',\r\n-    clubId: null,\r\n-  },\r\n-});\r\n-\r\n-await prisma.user.upsert({\r\n-  where: { email: 'franchise2@gym.com' },\r\n-  update: {},\r\n-  create: {\r\n-    email: 'franchise2@gym.com',\r\n-    password: hashedPassword,\r\n-    role: 'franchise_admin',\r\n-    clubId: null,\r\n-  },\r\n-});\r\n-\r\n-await prisma.trainer.createMany({\r\n-  data: [\r\n-    {\r\n-      name: 'Alyssa Kathan',\r\n-      email: 'alyssa@gym.com',\r\n-      specialization: 'Strength Training',\r\n-      phone: '123-456-7890',\r\n-      clubId: club.id,\r\n+  // Create Super Admin user\r\n+  await prisma.user.create({\r\n+    data: {\r\n+      email: 'superadmin@gymfitness.com',\r\n+      password: '$2a$10$EXAMPLEHASHEDPASSWORDHERE', // hashed password, replace with bcrypt\r\n+      role: 'super_admin',\r\n+      name: 'Mike Bell',\r\n+      clubId: defaultClub.id,\r\n+      status: 'ACTIVE',\r\n     },\r\n-    {\r\n-      name: 'Jordan Sparks',\r\n-      email: 'jordan@gym.com',\r\n-      specialization: 'HIIT & Cardio',\r\n-      phone: '987-654-3210',\r\n-      clubId: club.id,\r\n-    },\r\n-  ],\r\n-  skipDuplicates: true,\r\n-});\r\n+  });\r\n \r\n-\r\n-\r\n-\r\n-const roles = ['super_admin', 'franchise_admin', 'trainer', 'staff'] as const;\r\n-  const keys = [\r\n-    'view_members',\r\n-    'edit_members',\r\n-    'view_reports',\r\n-    'edit_schedule',\r\n-    'manage_billing',\r\n-    'assign_trainers',\r\n-  ] as const;\r\n-\r\n-  for (const role of roles) {\r\n-    for (const key of keys) {\r\n-      await prisma.permission.upsert({\r\n-        where: {\r\n-          role_key: {\r\n-            role,\r\n-            key,\r\n-          },\r\n-        },\r\n-        update: {},\r\n-        create: {\r\n-          role,\r\n-          key,\r\n-          allowed: role === 'super_admin', // Default: only super_admin gets all initially\r\n-        },\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  await prisma.trainingResource.create({\r\n-  data: {\r\n-    title: 'How to Check In Members',\r\n-    description: 'This guide explains member check-in flow',\r\n-    type: 'video',\r\n-    videoUrl: 'https://www.youtube.com/watch?v=I2JM92yfs7g&list=RDI2JM92yfs7g&start_radio=1&ab_channel=90%27sDard-BollywoodSongs',\r\n-    roles: ['franchise_admin', 'staff'],\r\n-    tags: ['checkin', 'operations'],\r\n-  },\r\n-});\r\n-\r\n-await prisma.trainingResource.create({\r\n-  data: {\r\n-    title: 'Gym SOP PDF',\r\n-    description: 'Standard Operating Procedures for staff',\r\n-    type: 'document',\r\n-    fileUrl: '/uploads/gym-sop.pdf',\r\n-    tags: ['operations', 'safety'],\r\n-    roles: ['staff', 'trainer'],\r\n-  },\r\n-});\r\n-\r\n-\r\n-  console.log('✅ Seed complete: users, trainers, permissions, club.');\r\n+  console.log('✅ Super Admin seeded.');\r\n }\r\n \r\n-\r\n main()\r\n   .catch((e) => {\r\n-    console.error(e);\r\n+    console.error('❌ Seeding failed:', e);\r\n     process.exit(1);\r\n   })\r\n-  .finally(() => prisma.$disconnect());\r\n+  .finally(async () => {\r\n+    await prisma.$disconnect();\r\n+  });\r\n"
                },
                {
                    "date": 1753166941401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,45 @@\n-\r\n // ⚠️ Dev seed only. NEVER run this in production.\r\n+import { PrismaClient } from '@prisma/client';\r\n+import bcrypt from 'bcryptjs';\r\n \r\n-// prisma/seed.ts\r\n-import { PrismaClient } from '@prisma/client';\r\n const prisma = new PrismaClient();\r\n \r\n async function main() {\r\n-  console.log('🌱 Seeding: Super Admin...');\r\n+  const hashedPassword = await bcrypt.hash('password123', 10);\r\n \r\n-  // Optional: create a default club for this super admin to be associated with\r\n-  const defaultClub = await prisma.club.create({\r\n-    data: {\r\n+  // Create a central HQ club\r\n+  const club = await prisma.club.upsert({\r\n+    where: { id: 'club1' },\r\n+    update: {},\r\n+    create: {\r\n+      id: 'club1',\r\n       name: 'Gym Fitness HQ',\r\n       location: 'New York, NY',\r\n       timezone: 'America/New_York',\r\n       clubEmail: 'hq@gymfitness.com',\r\n-      status: 'active',\r\n     },\r\n   });\r\n \r\n   // Create Super Admin user\r\n-  await prisma.user.create({\r\n-    data: {\r\n-      email: 'superadmin@gymfitness.com',\r\n-      password: '$2a$10$EXAMPLEHASHEDPASSWORDHERE', // hashed password, replace with bcrypt\r\n+  await prisma.user.upsert({\r\n+    where: { email: 'super@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      email: 'super@gym.com',\r\n+      password: hashedPassword,\r\n       role: 'super_admin',\r\n       name: 'Mike Bell',\r\n-      clubId: defaultClub.id,\r\n+      clubId: club.id,\r\n       status: 'ACTIVE',\r\n     },\r\n   });\r\n \r\n-  console.log('✅ Super Admin seeded.');\r\n+  console.log('✅ Seed complete: Super Admin created.');\r\n }\r\n \r\n main()\r\n   .catch((e) => {\r\n-    console.error('❌ Seeding failed:', e);\r\n+    console.error('❌ Seed failed:', e);\r\n     process.exit(1);\r\n   })\r\n-  .finally(async () => {\r\n-    await prisma.$disconnect();\r\n-  });\r\n+  .finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1753167028314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,14 @@\n-// ⚠️ Dev seed only. NEVER run this in production.\r\n+// ⚠️ Dev seed only — never run in production\r\n import { PrismaClient } from '@prisma/client';\r\n import bcrypt from 'bcryptjs';\r\n \r\n const prisma = new PrismaClient();\r\n \r\n async function main() {\r\n   const hashedPassword = await bcrypt.hash('password123', 10);\r\n \r\n-  // Create a central HQ club\r\n+  // Create a club (required by User.clubId foreign key)\r\n   const club = await prisma.club.upsert({\r\n     where: { id: 'club1' },\r\n     update: {},\r\n     create: {\r\n@@ -16,12 +16,13 @@\n       name: 'Gym Fitness HQ',\r\n       location: 'New York, NY',\r\n       timezone: 'America/New_York',\r\n       clubEmail: 'hq@gymfitness.com',\r\n+      status: 'active',\r\n     },\r\n   });\r\n \r\n-  // Create Super Admin user\r\n+  // Create a Super Admin user\r\n   await prisma.user.upsert({\r\n     where: { email: 'super@gym.com' },\r\n     update: {},\r\n     create: {\r\n@@ -33,9 +34,9 @@\n       status: 'ACTIVE',\r\n     },\r\n   });\r\n \r\n-  console.log('✅ Seed complete: Super Admin created.');\r\n+  console.log('✅ Super Admin seed complete.');\r\n }\r\n \r\n main()\r\n   .catch((e) => {\r\n"
                },
                {
                    "date": 1753167490510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,42 +1,359 @@\n-// ⚠️ Dev seed only — never run in production\r\n import { PrismaClient } from '@prisma/client';\r\n import bcrypt from 'bcryptjs';\r\n \r\n const prisma = new PrismaClient();\r\n \r\n async function main() {\r\n-  const hashedPassword = await bcrypt.hash('password123', 10);\r\n+  const password = await bcrypt.hash('password123', 10);\r\n \r\n-  // Create a club (required by User.clubId foreign key)\r\n-  const club = await prisma.club.upsert({\r\n+  // === SUPER ADMIN & HQ CLUB ===\r\n+  const hq = await prisma.club.upsert({\r\n     where: { id: 'club1' },\r\n     update: {},\r\n     create: {\r\n       id: 'club1',\r\n       name: 'Gym Fitness HQ',\r\n       location: 'New York, NY',\r\n       timezone: 'America/New_York',\r\n       clubEmail: 'hq@gymfitness.com',\r\n-      status: 'active',\r\n     },\r\n   });\r\n \r\n-  // Create a Super Admin user\r\n   await prisma.user.upsert({\r\n     where: { email: 'super@gym.com' },\r\n     update: {},\r\n     create: {\r\n       email: 'super@gym.com',\r\n-      password: hashedPassword,\r\n+      password,\r\n       role: 'super_admin',\r\n       name: 'Mike Bell',\r\n-      clubId: club.id,\r\n+      clubId: hq.id,\r\n       status: 'ACTIVE',\r\n     },\r\n   });\r\n \r\n-  console.log('✅ Super Admin seed complete.');\r\n+  // === FRANCHISE CLUBS + ADMINS ===\r\n+  const chicago = await prisma.club.create({\r\n+    data: {\r\n+      name: 'Gym Chicago',\r\n+      location: 'Chicago, IL',\r\n+      timezone: 'America/Chicago',\r\n+      clubEmail: 'chicago@gymfitness.com',\r\n+    },\r\n+  });\r\n+\r\n+  const austin = await prisma.club.create({\r\n+    data: {\r\n+      name: 'Gym Austin',\r\n+      location: 'Austin, TX',\r\n+      timezone: 'America/Chicago',\r\n+      clubEmail: 'austin@gymfitness.com',\r\n+    },\r\n+  });\r\n+\r\n+  await prisma.user.createMany({\r\n+    data: [\r\n+      {\r\n+        email: 'franchise.chicago@gym.com',\r\n+        password,\r\n+        role: 'franchise_admin',\r\n+        name: 'Jennifer Adams',\r\n+        clubId: chicago.id,\r\n+        status: 'ACTIVE',\r\n+      },\r\n+      {\r\n+        email: 'franchise.austin@gym.com',\r\n+        password,\r\n+        role: 'franchise_admin',\r\n+        name: 'Robert Chan',\r\n+        clubId: austin.id,\r\n+        status: 'ACTIVE',\r\n+      },\r\n+    ],\r\n+    skipDuplicates: true,\r\n+  });\r\n+\r\n+  // === TRAINERS (linked to Users) ===\r\n+  const trainerUsers = await Promise.all([\r\n+    prisma.user.create({\r\n+      data: {\r\n+        email: 'alyssa@gym.com',\r\n+        password,\r\n+        role: 'trainer',\r\n+        name: 'Alyssa Kathan',\r\n+        clubId: chicago.id,\r\n+        status: 'ACTIVE',\r\n+      },\r\n+    }),\r\n+    prisma.user.create({\r\n+      data: {\r\n+        email: 'jordan@gym.com',\r\n+        password,\r\n+        role: 'trainer',\r\n+        name: 'Jordan Sparks',\r\n+        clubId: austin.id,\r\n+        status: 'ACTIVE',\r\n+      },\r\n+    }),\r\n+    prisma.user.create({\r\n+      data: {\r\n+        email: 'david@gym.com',\r\n+        password,\r\n+        role: 'trainer',\r\n+        name: 'David Mills',\r\n+        clubId: chicago.id,\r\n+        status: 'ACTIVE',\r\n+      },\r\n+    }),\r\n+  ]);\r\n+\r\n+  await prisma.trainer.createMany({\r\n+    data: [\r\n+      {\r\n+        name: 'Alyssa Kathan',\r\n+        email: 'alyssa@gym.com',\r\n+        clubId: chicago.id,\r\n+        userId: trainerUsers[0].id,\r\n+        specialization: 'Strength Training',\r\n+        phone: '312-555-1234',\r\n+      },\r\n+      {\r\n+        name: 'Jordan Sparks',\r\n+        email: 'jordan@gym.com',\r\n+        clubId: austin.id,\r\n+        userId: trainerUsers[1].id,\r\n+        specialization: 'HIIT & Cardio',\r\n+        phone: '737-555-6543',\r\n+      },\r\n+      {\r\n+        name: 'David Mills',\r\n+        email: 'david@gym.com',\r\n+        clubId: chicago.id,\r\n+        userId: trainerUsers[2].id,\r\n+        specialization: 'Functional Mobility',\r\n+        phone: '773-555-7890',\r\n+      },\r\n+    ],\r\n+    skipDuplicates: true,\r\n+  });\r\n+\r\n+  // === MEMBERS (3 active, 2 prospects) ===\r\n+  const memberUsers = await Promise.all([\r\n+    prisma.user.create({ data: { email: 'emma@gym.com', password, role: 'member', name: 'Emma Stone', clubId: chicago.id, status: 'ACTIVE' } }),\r\n+    prisma.user.create({ data: { email: 'jake@gym.com', password, role: 'member', name: 'Jake Harris', clubId: austin.id, status: 'ACTIVE' } }),\r\n+    prisma.user.create({ data: { email: 'tina@gym.com', password, role: 'member', name: 'Tina Ray', clubId: chicago.id, status: 'ACTIVE' } }),\r\n+    prisma.user.create({ data: { email: 'prospect1@gym.com', password, role: 'member', name: 'Liam Hunt', clubId: chicago.id, status: 'ACTIVE' } }),\r\n+    prisma.user.create({ data: { email: 'prospect2@gym.com', password, role: 'member', name: 'Grace Miles', clubId: austin.id, status: 'ACTIVE' } }),\r\n+  ]);\r\n+\r\n+  const now = new Date();\r\n+  const nextMonth = new Date(now);\r\n+  nextMonth.setMonth(now.getMonth() + 1);\r\n+  const lastMonth = new Date(now);\r\n+  lastMonth.setMonth(now.getMonth() - 1);\r\n+\r\n+  const [emma, jake, tina] = await Promise.all([\r\n+    prisma.member.create({\r\n+      data: {\r\n+        firstName: 'Emma',\r\n+        lastName: 'Stone',\r\n+        email: 'emma@gym.com',\r\n+        gender: 'female',\r\n+        clubId: chicago.id,\r\n+        userId: memberUsers[0].id,\r\n+        memberType: 'member',\r\n+      },\r\n+    }),\r\n+    prisma.member.create({\r\n+      data: {\r\n+        firstName: 'Jake',\r\n+        lastName: 'Harris',\r\n+        email: 'jake@gym.com',\r\n+        gender: 'male',\r\n+        clubId: austin.id,\r\n+        userId: memberUsers[1].id,\r\n+        memberType: 'member',\r\n+      },\r\n+    }),\r\n+    prisma.member.create({\r\n+      data: {\r\n+        firstName: 'Tina',\r\n+        lastName: 'Ray',\r\n+        email: 'tina@gym.com',\r\n+        gender: 'female',\r\n+        clubId: chicago.id,\r\n+        userId: memberUsers[2].id,\r\n+        memberType: 'member',\r\n+      },\r\n+    }),\r\n+  ]);\r\n+\r\n+  await prisma.member.createMany({\r\n+    data: [\r\n+      {\r\n+        firstName: 'Liam',\r\n+        lastName: 'Hunt',\r\n+        email: 'prospect1@gym.com',\r\n+        gender: 'male',\r\n+        clubId: chicago.id,\r\n+        userId: memberUsers[3].id,\r\n+        memberType: 'prospect',\r\n+      },\r\n+      {\r\n+        firstName: 'Grace',\r\n+        lastName: 'Miles',\r\n+        email: 'prospect2@gym.com',\r\n+        gender: 'female',\r\n+        clubId: austin.id,\r\n+        userId: memberUsers[4].id,\r\n+        memberType: 'prospect',\r\n+      },\r\n+    ],\r\n+    skipDuplicates: true,\r\n+  });\r\n+\r\n+  // === MEMBERSHIP PLANS ===\r\n+  await prisma.membershipPlan.createMany({\r\n+    data: [\r\n+      {\r\n+        name: 'Monthly Unlimited',\r\n+        price: 60,\r\n+        durationInDays: 30,\r\n+        description: 'Unlimited gym access for 30 days',\r\n+      },\r\n+      {\r\n+        name: 'Annual Unlimited',\r\n+        price: 600,\r\n+        durationInDays: 365,\r\n+        description: 'Unlimited access with discounted rate',\r\n+      },\r\n+    ],\r\n+    skipDuplicates: true,\r\n+  });\r\n+\r\n+  // === MEMBERSHIPS + INVOICES ===\r\n+  await prisma.membership.create({\r\n+    data: {\r\n+      memberId: emma.id,\r\n+      planName: 'Monthly Unlimited',\r\n+      startDate: now,\r\n+      endDate: nextMonth,\r\n+      autoRenew: true,\r\n+      status: 'active',\r\n+    },\r\n+  });\r\n+\r\n+  await prisma.membership.create({\r\n+    data: {\r\n+      memberId: jake.id,\r\n+      planName: 'Annual Unlimited',\r\n+      startDate: lastMonth,\r\n+      endDate: nextMonth,\r\n+      autoRenew: false,\r\n+      status: 'active',\r\n+    },\r\n+  });\r\n+\r\n+  await prisma.invoice.createMany({\r\n+    data: [\r\n+      {\r\n+        memberId: emma.id,\r\n+        planName: 'Monthly Unlimited',\r\n+        amount: 60,\r\n+        clubId: chicago.id,\r\n+        status: 'paid',\r\n+        dueDate: nextMonth,\r\n+      },\r\n+      {\r\n+        memberId: jake.id,\r\n+        planName: 'Annual Unlimited',\r\n+        amount: 600,\r\n+        clubId: austin.id,\r\n+        status: 'paid',\r\n+        dueDate: nextMonth,\r\n+      },\r\n+      {\r\n+        memberId: tina.id,\r\n+        planName: 'Monthly Unlimited',\r\n+        amount: 60,\r\n+        clubId: chicago.id,\r\n+        status: 'unpaid',\r\n+        dueDate: nextMonth,\r\n+      },\r\n+    ],\r\n+  });\r\n+\r\n+  // === CLASS SCHEDULE + BOOKINGS ===\r\n+  const trainer = await prisma.trainer.findFirst({ where: { email: 'alyssa@gym.com' } });\r\n+  const schedule = await prisma.classSchedule.create({\r\n+    data: {\r\n+      title: 'HIIT Bootcamp',\r\n+      date: nextMonth,\r\n+      duration: 60,\r\n+      maxCapacity: 15,\r\n+      trainerId: trainer!.id,\r\n+      clubId: chicago.id,\r\n+      classType: 'Group Session',\r\n+    },\r\n+  });\r\n+\r\n+  await prisma.booking.createMany({\r\n+    data: [\r\n+      { memberId: emma.id, scheduleId: schedule.id, status: 'confirmed' },\r\n+      { memberId: tina.id, scheduleId: schedule.id, status: 'waitlisted' },\r\n+    ],\r\n+  });\r\n+\r\n+  // === PERMISSIONS ===\r\n+  const roles = ['super_admin', 'franchise_admin', 'trainer', 'staff'] as const;\r\n+  const keys = [\r\n+    'view_members',\r\n+    'edit_members',\r\n+    'view_reports',\r\n+    'edit_schedule',\r\n+    'manage_billing',\r\n+    'assign_trainers',\r\n+  ] as const;\r\n+\r\n+  for (const role of roles) {\r\n+    for (const key of keys) {\r\n+      await prisma.permission.upsert({\r\n+        where: { role_key: { role, key } },\r\n+        update: {},\r\n+        create: {\r\n+          role,\r\n+          key,\r\n+          allowed: role === 'super_admin',\r\n+        },\r\n+      });\r\n+    }\r\n+  }\r\n+\r\n+  // === TRAINING RESOURCES ===\r\n+  await prisma.trainingResource.createMany({\r\n+    data: [\r\n+      {\r\n+        title: 'Gym SOP PDF',\r\n+        description: 'Standard Operating Procedures',\r\n+        type: 'document',\r\n+        fileUrl: '/uploads/gym-sop.pdf',\r\n+        tags: ['operations', 'rules'],\r\n+        roles: ['staff', 'trainer'],\r\n+      },\r\n+      {\r\n+        title: 'Check-In Tutorial',\r\n+        description: 'How to check in members at front desk',\r\n+        type: 'video',\r\n+        videoUrl: 'https://www.youtube.com/watch?v=demo123',\r\n+        tags: ['checkin'],\r\n+        roles: ['franchise_admin', 'staff'],\r\n+      },\r\n+    ],\r\n+    skipDuplicates: true,\r\n+  });\r\n+\r\n+  console.log('✅ Full seed complete: admins, trainers, members, plans, invoices, classes.');\r\n }\r\n \r\n main()\r\n   .catch((e) => {\r\n"
                },
                {
                    "date": 1753169034926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -351,8 +351,23 @@\n     ],\r\n     skipDuplicates: true,\r\n   });\r\n \r\n+await prisma.location.create({\r\n+  data: {\r\n+    name: 'Studio A – Strength Zone',\r\n+    clubId: chicago.id,\r\n+  },\r\n+});\r\n+await prisma.location.create({\r\n+  data: {\r\n+    name: 'Mind & Motion Room – Yoga Space',\r\n+    clubId: austin.id,\r\n+  },\r\n+});\r\n+\r\n+\r\n+\r\n   console.log('✅ Full seed complete: admins, trainers, members, plans, invoices, classes.');\r\n }\r\n \r\n main()\r\n"
                },
                {
                    "date": 1753175350104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -351,23 +351,12 @@\n     ],\r\n     skipDuplicates: true,\r\n   });\r\n \r\n-await prisma.location.create({\r\n-  data: {\r\n-    name: 'Studio A – Strength Zone',\r\n-    clubId: chicago.id,\r\n-  },\r\n-});\r\n-await prisma.location.create({\r\n-  data: {\r\n-    name: 'Mind & Motion Room – Yoga Space',\r\n-    clubId: austin.id,\r\n-  },\r\n-});\r\n \r\n \r\n \r\n+\r\n   console.log('✅ Full seed complete: admins, trainers, members, plans, invoices, classes.');\r\n }\r\n \r\n main()\r\n"
                },
                {
                    "date": 1753176708227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,367 +1,174 @@\n-import { PrismaClient } from '@prisma/client';\r\n-import bcrypt from 'bcryptjs';\r\n-\r\n+const { PrismaClient } = require('@prisma/client');\r\n const prisma = new PrismaClient();\r\n \r\n-async function main() {\r\n-  const password = await bcrypt.hash('password123', 10);\r\n+async function seedInvoices() {\r\n+  try {\r\n+    console.log('🌱 Starting invoice seeding...');\r\n \r\n-  // === SUPER ADMIN & HQ CLUB ===\r\n-  const hq = await prisma.club.upsert({\r\n-    where: { id: 'club1' },\r\n-    update: {},\r\n-    create: {\r\n-      id: 'club1',\r\n-      name: 'Gym Fitness HQ',\r\n-      location: 'New York, NY',\r\n-      timezone: 'America/New_York',\r\n-      clubEmail: 'hq@gymfitness.com',\r\n-    },\r\n-  });\r\n+    // First, let's check if we have clubs and members to reference\r\n+    const clubs = await prisma.club.findMany({\r\n+      select: { id: true, name: true }\r\n+    });\r\n \r\n-  await prisma.user.upsert({\r\n-    where: { email: 'super@gym.com' },\r\n-    update: {},\r\n-    create: {\r\n-      email: 'super@gym.com',\r\n-      password,\r\n-      role: 'super_admin',\r\n-      name: 'Mike Bell',\r\n-      clubId: hq.id,\r\n-      status: 'ACTIVE',\r\n-    },\r\n-  });\r\n+    const members = await prisma.member.findMany({\r\n+      select: { id: true, firstName: true, lastName: true, clubId: true }\r\n+    });\r\n \r\n-  // === FRANCHISE CLUBS + ADMINS ===\r\n-  const chicago = await prisma.club.create({\r\n-    data: {\r\n-      name: 'Gym Chicago',\r\n-      location: 'Chicago, IL',\r\n-      timezone: 'America/Chicago',\r\n-      clubEmail: 'chicago@gymfitness.com',\r\n-    },\r\n-  });\r\n+    console.log(`Found ${clubs.length} clubs and ${members.length} members`);\r\n \r\n-  const austin = await prisma.club.create({\r\n-    data: {\r\n-      name: 'Gym Austin',\r\n-      location: 'Austin, TX',\r\n-      timezone: 'America/Chicago',\r\n-      clubEmail: 'austin@gymfitness.com',\r\n-    },\r\n-  });\r\n+    if (clubs.length === 0) {\r\n+      console.log('❌ No clubs found. Please seed clubs first.');\r\n+      return;\r\n+    }\r\n \r\n-  await prisma.user.createMany({\r\n-    data: [\r\n-      {\r\n-        email: 'franchise.chicago@gym.com',\r\n-        password,\r\n-        role: 'franchise_admin',\r\n-        name: 'Jennifer Adams',\r\n-        clubId: chicago.id,\r\n-        status: 'ACTIVE',\r\n-      },\r\n-      {\r\n-        email: 'franchise.austin@gym.com',\r\n-        password,\r\n-        role: 'franchise_admin',\r\n-        name: 'Robert Chan',\r\n-        clubId: austin.id,\r\n-        status: 'ACTIVE',\r\n-      },\r\n-    ],\r\n-    skipDuplicates: true,\r\n-  });\r\n+    // Common membership plan names for realistic invoices\r\n+    const planNames = [\r\n+      'Basic Monthly',\r\n+      'Premium Monthly', \r\n+      'Annual Membership',\r\n+      'Student Discount',\r\n+      'Family Plan',\r\n+      'Personal Training Package',\r\n+      'Group Classes Only',\r\n+      'Full Access Premium'\r\n+    ];\r\n \r\n-  // === TRAINERS (linked to Users) ===\r\n-  const trainerUsers = await Promise.all([\r\n-    prisma.user.create({\r\n-      data: {\r\n-        email: 'alyssa@gym.com',\r\n-        password,\r\n-        role: 'trainer',\r\n-        name: 'Alyssa Kathan',\r\n-        clubId: chicago.id,\r\n-        status: 'ACTIVE',\r\n-      },\r\n-    }),\r\n-    prisma.user.create({\r\n-      data: {\r\n-        email: 'jordan@gym.com',\r\n-        password,\r\n-        role: 'trainer',\r\n-        name: 'Jordan Sparks',\r\n-        clubId: austin.id,\r\n-        status: 'ACTIVE',\r\n-      },\r\n-    }),\r\n-    prisma.user.create({\r\n-      data: {\r\n-        email: 'david@gym.com',\r\n-        password,\r\n-        role: 'trainer',\r\n-        name: 'David Mills',\r\n-        clubId: chicago.id,\r\n-        status: 'ACTIVE',\r\n-      },\r\n-    }),\r\n-  ]);\r\n+    // Generate invoices for the last 120 days\r\n+    const invoices = [];\r\n+    const endDate = new Date();\r\n+    const startDate = new Date();\r\n+    startDate.setDate(endDate.getDate() - 120);\r\n \r\n-  await prisma.trainer.createMany({\r\n-    data: [\r\n-      {\r\n-        name: 'Alyssa Kathan',\r\n-        email: 'alyssa@gym.com',\r\n-        clubId: chicago.id,\r\n-        userId: trainerUsers[0].id,\r\n-        specialization: 'Strength Training',\r\n-        phone: '312-555-1234',\r\n-      },\r\n-      {\r\n-        name: 'Jordan Sparks',\r\n-        email: 'jordan@gym.com',\r\n-        clubId: austin.id,\r\n-        userId: trainerUsers[1].id,\r\n-        specialization: 'HIIT & Cardio',\r\n-        phone: '737-555-6543',\r\n-      },\r\n-      {\r\n-        name: 'David Mills',\r\n-        email: 'david@gym.com',\r\n-        clubId: chicago.id,\r\n-        userId: trainerUsers[2].id,\r\n-        specialization: 'Functional Mobility',\r\n-        phone: '773-555-7890',\r\n-      },\r\n-    ],\r\n-    skipDuplicates: true,\r\n-  });\r\n+    // Generate 80-120 invoices with realistic distribution\r\n+    const numInvoices = Math.floor(Math.random() * 41) + 80; // 80-120 invoices\r\n \r\n-  // === MEMBERS (3 active, 2 prospects) ===\r\n-  const memberUsers = await Promise.all([\r\n-    prisma.user.create({ data: { email: 'emma@gym.com', password, role: 'member', name: 'Emma Stone', clubId: chicago.id, status: 'ACTIVE' } }),\r\n-    prisma.user.create({ data: { email: 'jake@gym.com', password, role: 'member', name: 'Jake Harris', clubId: austin.id, status: 'ACTIVE' } }),\r\n-    prisma.user.create({ data: { email: 'tina@gym.com', password, role: 'member', name: 'Tina Ray', clubId: chicago.id, status: 'ACTIVE' } }),\r\n-    prisma.user.create({ data: { email: 'prospect1@gym.com', password, role: 'member', name: 'Liam Hunt', clubId: chicago.id, status: 'ACTIVE' } }),\r\n-    prisma.user.create({ data: { email: 'prospect2@gym.com', password, role: 'member', name: 'Grace Miles', clubId: austin.id, status: 'ACTIVE' } }),\r\n-  ]);\r\n+    for (let i = 0; i < numInvoices; i++) {\r\n+      // Random date within the last 120 days\r\n+      const randomDate = new Date(\r\n+        startDate.getTime() + \r\n+        Math.random() * (endDate.getTime() - startDate.getTime())\r\n+      );\r\n \r\n-  const now = new Date();\r\n-  const nextMonth = new Date(now);\r\n-  nextMonth.setMonth(now.getMonth() + 1);\r\n-  const lastMonth = new Date(now);\r\n-  lastMonth.setMonth(now.getMonth() - 1);\r\n+      // Random club (if multiple clubs exist)\r\n+      const randomClub = clubs[Math.floor(Math.random() * clubs.length)];\r\n+      \r\n+      // Random member from the same club (if members exist)\r\n+      const clubMembers = members.filter(m => m.clubId === randomClub.id);\r\n+      const randomMember = clubMembers.length > 0 \r\n+        ? clubMembers[Math.floor(Math.random() * clubMembers.length)]\r\n+        : null;\r\n \r\n-  const [emma, jake, tina] = await Promise.all([\r\n-    prisma.member.create({\r\n-      data: {\r\n-        firstName: 'Emma',\r\n-        lastName: 'Stone',\r\n-        email: 'emma@gym.com',\r\n-        gender: 'female',\r\n-        clubId: chicago.id,\r\n-        userId: memberUsers[0].id,\r\n-        memberType: 'member',\r\n-      },\r\n-    }),\r\n-    prisma.member.create({\r\n-      data: {\r\n-        firstName: 'Jake',\r\n-        lastName: 'Harris',\r\n-        email: 'jake@gym.com',\r\n-        gender: 'male',\r\n-        clubId: austin.id,\r\n-        userId: memberUsers[1].id,\r\n-        memberType: 'member',\r\n-      },\r\n-    }),\r\n-    prisma.member.create({\r\n-      data: {\r\n-        firstName: 'Tina',\r\n-        lastName: 'Ray',\r\n-        email: 'tina@gym.com',\r\n-        gender: 'female',\r\n-        clubId: chicago.id,\r\n-        userId: memberUsers[2].id,\r\n-        memberType: 'member',\r\n-      },\r\n-    }),\r\n-  ]);\r\n+      // Random plan name\r\n+      const randomPlan = planNames[Math.floor(Math.random() * planNames.length)];\r\n \r\n-  await prisma.member.createMany({\r\n-    data: [\r\n-      {\r\n-        firstName: 'Liam',\r\n-        lastName: 'Hunt',\r\n-        email: 'prospect1@gym.com',\r\n-        gender: 'male',\r\n-        clubId: chicago.id,\r\n-        userId: memberUsers[3].id,\r\n-        memberType: 'prospect',\r\n-      },\r\n-      {\r\n-        firstName: 'Grace',\r\n-        lastName: 'Miles',\r\n-        email: 'prospect2@gym.com',\r\n-        gender: 'female',\r\n-        clubId: austin.id,\r\n-        userId: memberUsers[4].id,\r\n-        memberType: 'prospect',\r\n-      },\r\n-    ],\r\n-    skipDuplicates: true,\r\n-  });\r\n+      // Realistic pricing based on plan type\r\n+      let amount;\r\n+      if (randomPlan.includes('Annual')) {\r\n+        amount = Math.floor(Math.random() * 20000) + 30000; // 30k-50k for annual\r\n+      } else if (randomPlan.includes('Premium') || randomPlan.includes('Personal Training')) {\r\n+        amount = Math.floor(Math.random() * 5000) + 8000; // 8k-13k for premium\r\n+      } else if (randomPlan.includes('Student')) {\r\n+        amount = Math.floor(Math.random() * 2000) + 2000; // 2k-4k for student\r\n+      } else if (randomPlan.includes('Family')) {\r\n+        amount = Math.floor(Math.random() * 8000) + 12000; // 12k-20k for family\r\n+      } else {\r\n+        amount = Math.floor(Math.random() * 4000) + 4000; // 4k-8k for basic\r\n+      }\r\n \r\n-  // === MEMBERSHIP PLANS ===\r\n-  await prisma.membershipPlan.createMany({\r\n-    data: [\r\n-      {\r\n-        name: 'Monthly Unlimited',\r\n-        price: 60,\r\n-        durationInDays: 30,\r\n-        description: 'Unlimited gym access for 30 days',\r\n-      },\r\n-      {\r\n-        name: 'Annual Unlimited',\r\n-        price: 600,\r\n-        durationInDays: 365,\r\n-        description: 'Unlimited access with discounted rate',\r\n-      },\r\n-    ],\r\n-    skipDuplicates: true,\r\n-  });\r\n+      // Realistic status distribution (most should be paid)\r\n+      const statusWeights = {\r\n+        'paid': 0.75,     // 75% paid\r\n+        'unpaid': 0.15,   // 15% unpaid\r\n+        'overdue': 0.07,  // 7% overdue\r\n+        'failed': 0.03    // 3% failed\r\n+      };\r\n \r\n-  // === MEMBERSHIPS + INVOICES ===\r\n-  await prisma.membership.create({\r\n-    data: {\r\n-      memberId: emma.id,\r\n-      planName: 'Monthly Unlimited',\r\n-      startDate: now,\r\n-      endDate: nextMonth,\r\n-      autoRenew: true,\r\n-      status: 'active',\r\n-    },\r\n-  });\r\n+      let status = 'paid';\r\n+      const random = Math.random();\r\n+      if (random > 0.75) {\r\n+        if (random > 0.90) {\r\n+          if (random > 0.97) {\r\n+            status = 'failed';\r\n+          } else {\r\n+            status = 'overdue';\r\n+          }\r\n+        } else {\r\n+          status = 'unpaid';\r\n+        }\r\n+      }\r\n \r\n-  await prisma.membership.create({\r\n-    data: {\r\n-      memberId: jake.id,\r\n-      planName: 'Annual Unlimited',\r\n-      startDate: lastMonth,\r\n-      endDate: nextMonth,\r\n-      autoRenew: false,\r\n-      status: 'active',\r\n-    },\r\n-  });\r\n+      // Due date (typically 30 days after issued date for unpaid invoices)\r\n+      const dueDate = new Date(randomDate);\r\n+      dueDate.setDate(dueDate.getDate() + 30);\r\n \r\n-  await prisma.invoice.createMany({\r\n-    data: [\r\n-      {\r\n-        memberId: emma.id,\r\n-        planName: 'Monthly Unlimited',\r\n-        amount: 60,\r\n-        clubId: chicago.id,\r\n-        status: 'paid',\r\n-        dueDate: nextMonth,\r\n-      },\r\n-      {\r\n-        memberId: jake.id,\r\n-        planName: 'Annual Unlimited',\r\n-        amount: 600,\r\n-        clubId: austin.id,\r\n-        status: 'paid',\r\n-        dueDate: nextMonth,\r\n-      },\r\n-      {\r\n-        memberId: tina.id,\r\n-        planName: 'Monthly Unlimited',\r\n-        amount: 60,\r\n-        clubId: chicago.id,\r\n-        status: 'unpaid',\r\n-        dueDate: nextMonth,\r\n-      },\r\n-    ],\r\n-  });\r\n+      invoices.push({\r\n+        memberId: randomMember?.id || null,\r\n+        planName: randomPlan,\r\n+        amount: amount,\r\n+        status: status,\r\n+        issuedAt: randomDate,\r\n+        dueDate: dueDate,\r\n+        clubId: randomClub.id\r\n+      });\r\n+    }\r\n \r\n-  // === CLASS SCHEDULE + BOOKINGS ===\r\n-  const trainer = await prisma.trainer.findFirst({ where: { email: 'alyssa@gym.com' } });\r\n-  const schedule = await prisma.classSchedule.create({\r\n-    data: {\r\n-      title: 'HIIT Bootcamp',\r\n-      date: nextMonth,\r\n-      duration: 60,\r\n-      maxCapacity: 15,\r\n-      trainerId: trainer!.id,\r\n-      clubId: chicago.id,\r\n-      classType: 'Group Session',\r\n-    },\r\n-  });\r\n+    // Sort invoices by date for better logging\r\n+    invoices.sort((a, b) => a.issuedAt.getTime() - b.issuedAt.getTime());\r\n \r\n-  await prisma.booking.createMany({\r\n-    data: [\r\n-      { memberId: emma.id, scheduleId: schedule.id, status: 'confirmed' },\r\n-      { memberId: tina.id, scheduleId: schedule.id, status: 'waitlisted' },\r\n-    ],\r\n-  });\r\n-\r\n-  // === PERMISSIONS ===\r\n-  const roles = ['super_admin', 'franchise_admin', 'trainer', 'staff'] as const;\r\n-  const keys = [\r\n-    'view_members',\r\n-    'edit_members',\r\n-    'view_reports',\r\n-    'edit_schedule',\r\n-    'manage_billing',\r\n-    'assign_trainers',\r\n-  ] as const;\r\n-\r\n-  for (const role of roles) {\r\n-    for (const key of keys) {\r\n-      await prisma.permission.upsert({\r\n-        where: { role_key: { role, key } },\r\n-        update: {},\r\n-        create: {\r\n-          role,\r\n-          key,\r\n-          allowed: role === 'super_admin',\r\n-        },\r\n+    console.log(`📝 Creating ${invoices.length} invoices...`);\r\n+    \r\n+    // Insert invoices in batches to avoid memory issues\r\n+    const batchSize = 20;\r\n+    let createdCount = 0;\r\n+    \r\n+    for (let i = 0; i < invoices.length; i += batchSize) {\r\n+      const batch = invoices.slice(i, i + batchSize);\r\n+      await prisma.invoice.createMany({\r\n+        data: batch,\r\n+        skipDuplicates: true\r\n       });\r\n+      createdCount += batch.length;\r\n+      console.log(`✅ Created batch ${Math.ceil((i + 1) / batchSize)}: ${createdCount}/${invoices.length} invoices`);\r\n     }\r\n-  }\r\n \r\n-  // === TRAINING RESOURCES ===\r\n-  await prisma.trainingResource.createMany({\r\n-    data: [\r\n-      {\r\n-        title: 'Gym SOP PDF',\r\n-        description: 'Standard Operating Procedures',\r\n-        type: 'document',\r\n-        fileUrl: '/uploads/gym-sop.pdf',\r\n-        tags: ['operations', 'rules'],\r\n-        roles: ['staff', 'trainer'],\r\n-      },\r\n-      {\r\n-        title: 'Check-In Tutorial',\r\n-        description: 'How to check in members at front desk',\r\n-        type: 'video',\r\n-        videoUrl: 'https://www.youtube.com/watch?v=demo123',\r\n-        tags: ['checkin'],\r\n-        roles: ['franchise_admin', 'staff'],\r\n-      },\r\n-    ],\r\n-    skipDuplicates: true,\r\n-  });\r\n+    // Summary statistics\r\n+    const statusSummary = await prisma.invoice.groupBy({\r\n+      by: ['status'],\r\n+      _count: {\r\n+        status: true\r\n+      }\r\n+    });\r\n \r\n+    const totalRevenue = await prisma.invoice.aggregate({\r\n+      where: { status: 'paid' },\r\n+      _sum: { amount: true }\r\n+    });\r\n \r\n+    console.log('\\n📊 Seeding Summary:');\r\n+    console.log(`Total invoices created: ${createdCount}`);\r\n+    console.log('Status breakdown:');\r\n+    statusSummary.forEach(stat => {\r\n+      console.log(`  ${stat.status}: ${stat._count.status}`);\r\n+    });\r\n+    console.log(`Total revenue from paid invoices: Rs ${totalRevenue._sum.amount?.toLocaleString() || 0}`);\r\n \r\n+    console.log('\\n🎉 Invoice seeding completed successfully!');\r\n \r\n+  } catch (error) {\r\n+    console.error('❌ Error seeding invoices:', error);\r\n+    throw error;\r\n+  } finally {\r\n+    await prisma.$disconnect();\r\n+  }\r\n+}\r\n \r\n-  console.log('✅ Full seed complete: admins, trainers, members, plans, invoices, classes.');\r\n+// Run the seeding function\r\n+if (require.main === module) {\r\n+  seedInvoices()\r\n+    .catch((e) => {\r\n+      console.error('Seeding failed:', e);\r\n+      process.exit(1);\r\n+    });\r\n }\r\n \r\n-main()\r\n-  .catch((e) => {\r\n-    console.error('❌ Seed failed:', e);\r\n-    process.exit(1);\r\n-  })\r\n-  .finally(() => prisma.$disconnect());\r\n+module.exports = { seedInvoices };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753176782209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,37 @@\n-const { PrismaClient } = require('@prisma/client');\r\n+import { PrismaClient, InvoiceStatus } from '@prisma/client';\r\n+\r\n const prisma = new PrismaClient();\r\n \r\n-async function seedInvoices() {\r\n+interface ClubData {\r\n+  id: string;\r\n+  name: string;\r\n+}\r\n+\r\n+interface MemberData {\r\n+  id: string;\r\n+  firstName: string;\r\n+  lastName: string;\r\n+  clubId: string;\r\n+}\r\n+\r\n+interface StatusSummary {\r\n+  status: InvoiceStatus;\r\n+  _count: {\r\n+    status: number;\r\n+  };\r\n+}\r\n+\r\n+async function seedInvoices(): Promise<void> {\r\n   try {\r\n     console.log('🌱 Starting invoice seeding...');\r\n \r\n     // First, let's check if we have clubs and members to reference\r\n-    const clubs = await prisma.club.findMany({\r\n+    const clubs: ClubData[] = await prisma.club.findMany({\r\n       select: { id: true, name: true }\r\n     });\r\n \r\n-    const members = await prisma.member.findMany({\r\n+    const members: MemberData[] = await prisma.member.findMany({\r\n       select: { id: true, firstName: true, lastName: true, clubId: true }\r\n     });\r\n \r\n     console.log(`Found ${clubs.length} clubs and ${members.length} members`);\r\n@@ -21,9 +41,9 @@\n       return;\r\n     }\r\n \r\n     // Common membership plan names for realistic invoices\r\n-    const planNames = [\r\n+    const planNames: string[] = [\r\n       'Basic Monthly',\r\n       'Premium Monthly', \r\n       'Annual Membership',\r\n       'Student Discount',\r\n@@ -33,9 +53,18 @@\n       'Full Access Premium'\r\n     ];\r\n \r\n     // Generate invoices for the last 120 days\r\n-    const invoices = [];\r\n+    const invoices: Array<{\r\n+      memberId: string | null;\r\n+      planName: string;\r\n+      amount: number;\r\n+      status: InvoiceStatus;\r\n+      issuedAt: Date;\r\n+      dueDate: Date;\r\n+      clubId: string;\r\n+    }> = [];\r\n+\r\n     const endDate = new Date();\r\n     const startDate = new Date();\r\n     startDate.setDate(endDate.getDate() - 120);\r\n \r\n@@ -52,18 +81,18 @@\n       // Random club (if multiple clubs exist)\r\n       const randomClub = clubs[Math.floor(Math.random() * clubs.length)];\r\n       \r\n       // Random member from the same club (if members exist)\r\n-      const clubMembers = members.filter(m => m.clubId === randomClub.id);\r\n+      const clubMembers = members.filter((m: MemberData) => m.clubId === randomClub.id);\r\n       const randomMember = clubMembers.length > 0 \r\n         ? clubMembers[Math.floor(Math.random() * clubMembers.length)]\r\n         : null;\r\n \r\n       // Random plan name\r\n       const randomPlan = planNames[Math.floor(Math.random() * planNames.length)];\r\n \r\n       // Realistic pricing based on plan type\r\n-      let amount;\r\n+      let amount: number;\r\n       if (randomPlan.includes('Annual')) {\r\n         amount = Math.floor(Math.random() * 20000) + 30000; // 30k-50k for annual\r\n       } else if (randomPlan.includes('Premium') || randomPlan.includes('Personal Training')) {\r\n         amount = Math.floor(Math.random() * 5000) + 8000; // 8k-13k for premium\r\n@@ -75,26 +104,19 @@\n         amount = Math.floor(Math.random() * 4000) + 4000; // 4k-8k for basic\r\n       }\r\n \r\n       // Realistic status distribution (most should be paid)\r\n-      const statusWeights = {\r\n-        'paid': 0.75,     // 75% paid\r\n-        'unpaid': 0.15,   // 15% unpaid\r\n-        'overdue': 0.07,  // 7% overdue\r\n-        'failed': 0.03    // 3% failed\r\n-      };\r\n-\r\n-      let status = 'paid';\r\n+      let status: InvoiceStatus = InvoiceStatus.paid;\r\n       const random = Math.random();\r\n       if (random > 0.75) {\r\n         if (random > 0.90) {\r\n           if (random > 0.97) {\r\n-            status = 'failed';\r\n+            status = InvoiceStatus.failed;\r\n           } else {\r\n-            status = 'overdue';\r\n+            status = InvoiceStatus.overdue;\r\n           }\r\n         } else {\r\n-          status = 'unpaid';\r\n+          status = InvoiceStatus.unpaid;\r\n         }\r\n       }\r\n \r\n       // Due date (typically 30 days after issued date for unpaid invoices)\r\n@@ -131,24 +153,24 @@\n       console.log(`✅ Created batch ${Math.ceil((i + 1) / batchSize)}: ${createdCount}/${invoices.length} invoices`);\r\n     }\r\n \r\n     // Summary statistics\r\n-    const statusSummary = await prisma.invoice.groupBy({\r\n+    const statusSummary: StatusSummary[] = await prisma.invoice.groupBy({\r\n       by: ['status'],\r\n       _count: {\r\n         status: true\r\n       }\r\n     });\r\n \r\n     const totalRevenue = await prisma.invoice.aggregate({\r\n-      where: { status: 'paid' },\r\n+      where: { status: InvoiceStatus.paid },\r\n       _sum: { amount: true }\r\n     });\r\n \r\n     console.log('\\n📊 Seeding Summary:');\r\n     console.log(`Total invoices created: ${createdCount}`);\r\n     console.log('Status breakdown:');\r\n-    statusSummary.forEach(stat => {\r\n+    statusSummary.forEach((stat: StatusSummary) => {\r\n       console.log(`  ${stat.status}: ${stat._count.status}`);\r\n     });\r\n     console.log(`Total revenue from paid invoices: Rs ${totalRevenue._sum.amount?.toLocaleString() || 0}`);\r\n \r\n@@ -162,13 +184,13 @@\n   }\r\n }\r\n \r\n // Run the seeding function\r\n-if (require.main === module) {\r\n-  seedInvoices()\r\n-    .catch((e) => {\r\n-      console.error('Seeding failed:', e);\r\n-      process.exit(1);\r\n-    });\r\n+async function main(): Promise<void> {\r\n+  await seedInvoices();\r\n }\r\n\\ No newline at end of file\n \r\n-module.exports = { seedInvoices };\n+main()\r\n+  .catch((e) => {\r\n+    console.error('Seeding failed:', e);\r\n+    process.exit(1);\r\n+  });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753176825088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,196 +1,367 @@\n-import { PrismaClient, InvoiceStatus } from '@prisma/client';\r\n+import { PrismaClient } from '@prisma/client';\r\n+import bcrypt from 'bcryptjs';\r\n \r\n const prisma = new PrismaClient();\r\n \r\n-interface ClubData {\r\n-  id: string;\r\n-  name: string;\r\n-}\r\n+async function main() {\r\n+  const password = await bcrypt.hash('password123', 10);\r\n \r\n-interface MemberData {\r\n-  id: string;\r\n-  firstName: string;\r\n-  lastName: string;\r\n-  clubId: string;\r\n-}\r\n+  // === SUPER ADMIN & HQ CLUB ===\r\n+  const hq = await prisma.club.upsert({\r\n+    where: { id: 'club1' },\r\n+    update: {},\r\n+    create: {\r\n+      id: 'club1',\r\n+      name: 'Gym Fitness HQ',\r\n+      location: 'New York, NY',\r\n+      timezone: 'America/New_York',\r\n+      clubEmail: 'hq@gymfitness.com',\r\n+    },\r\n+  });\r\n \r\n-interface StatusSummary {\r\n-  status: InvoiceStatus;\r\n-  _count: {\r\n-    status: number;\r\n-  };\r\n-}\r\n+  await prisma.user.upsert({\r\n+    where: { email: 'super@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      email: 'super@gym.com',\r\n+      password,\r\n+      role: 'super_admin',\r\n+      name: 'Mike Bell',\r\n+      clubId: hq.id,\r\n+      status: 'ACTIVE',\r\n+    },\r\n+  });\r\n \r\n-async function seedInvoices(): Promise<void> {\r\n-  try {\r\n-    console.log('🌱 Starting invoice seeding...');\r\n+  // === FRANCHISE CLUBS + ADMINS ===\r\n+  const chicago = await prisma.club.create({\r\n+    data: {\r\n+      name: 'Gym Chicago',\r\n+      location: 'Chicago, IL',\r\n+      timezone: 'America/Chicago',\r\n+      clubEmail: 'chicago@gymfitness.com',\r\n+    },\r\n+  });\r\n \r\n-    // First, let's check if we have clubs and members to reference\r\n-    const clubs: ClubData[] = await prisma.club.findMany({\r\n-      select: { id: true, name: true }\r\n-    });\r\n+  const austin = await prisma.club.create({\r\n+    data: {\r\n+      name: 'Gym Austin',\r\n+      location: 'Austin, TX',\r\n+      timezone: 'America/Chicago',\r\n+      clubEmail: 'austin@gymfitness.com',\r\n+    },\r\n+  });\r\n \r\n-    const members: MemberData[] = await prisma.member.findMany({\r\n-      select: { id: true, firstName: true, lastName: true, clubId: true }\r\n-    });\r\n+  await prisma.user.createMany({\r\n+    data: [\r\n+      {\r\n+        email: 'franchise.chicago@gym.com',\r\n+        password,\r\n+        role: 'franchise_admin',\r\n+        name: 'Jennifer Adams',\r\n+        clubId: chicago.id,\r\n+        status: 'ACTIVE',\r\n+      },\r\n+      {\r\n+        email: 'franchise.austin@gym.com',\r\n+        password,\r\n+        role: 'franchise_admin',\r\n+        name: 'Robert Chan',\r\n+        clubId: austin.id,\r\n+        status: 'ACTIVE',\r\n+      },\r\n+    ],\r\n+    skipDuplicates: true,\r\n+  });\r\n \r\n-    console.log(`Found ${clubs.length} clubs and ${members.length} members`);\r\n+  // === TRAINERS (linked to Users) ===\r\n+  const trainerUsers = await Promise.all([\r\n+    prisma.user.create({\r\n+      data: {\r\n+        email: 'alyssa@gym.com',\r\n+        password,\r\n+        role: 'trainer',\r\n+        name: 'Alyssa Kathan',\r\n+        clubId: chicago.id,\r\n+        status: 'ACTIVE',\r\n+      },\r\n+    }),\r\n+    prisma.user.create({\r\n+      data: {\r\n+        email: 'jordan@gym.com',\r\n+        password,\r\n+        role: 'trainer',\r\n+        name: 'Jordan Sparks',\r\n+        clubId: austin.id,\r\n+        status: 'ACTIVE',\r\n+      },\r\n+    }),\r\n+    prisma.user.create({\r\n+      data: {\r\n+        email: 'david@gym.com',\r\n+        password,\r\n+        role: 'trainer',\r\n+        name: 'David Mills',\r\n+        clubId: chicago.id,\r\n+        status: 'ACTIVE',\r\n+      },\r\n+    }),\r\n+  ]);\r\n \r\n-    if (clubs.length === 0) {\r\n-      console.log('❌ No clubs found. Please seed clubs first.');\r\n-      return;\r\n-    }\r\n+  await prisma.trainer.createMany({\r\n+    data: [\r\n+      {\r\n+        name: 'Alyssa Kathan',\r\n+        email: 'alyssa@gym.com',\r\n+        clubId: chicago.id,\r\n+        userId: trainerUsers[0].id,\r\n+        specialization: 'Strength Training',\r\n+        phone: '312-555-1234',\r\n+      },\r\n+      {\r\n+        name: 'Jordan Sparks',\r\n+        email: 'jordan@gym.com',\r\n+        clubId: austin.id,\r\n+        userId: trainerUsers[1].id,\r\n+        specialization: 'HIIT & Cardio',\r\n+        phone: '737-555-6543',\r\n+      },\r\n+      {\r\n+        name: 'David Mills',\r\n+        email: 'david@gym.com',\r\n+        clubId: chicago.id,\r\n+        userId: trainerUsers[2].id,\r\n+        specialization: 'Functional Mobility',\r\n+        phone: '773-555-7890',\r\n+      },\r\n+    ],\r\n+    skipDuplicates: true,\r\n+  });\r\n \r\n-    // Common membership plan names for realistic invoices\r\n-    const planNames: string[] = [\r\n-      'Basic Monthly',\r\n-      'Premium Monthly', \r\n-      'Annual Membership',\r\n-      'Student Discount',\r\n-      'Family Plan',\r\n-      'Personal Training Package',\r\n-      'Group Classes Only',\r\n-      'Full Access Premium'\r\n-    ];\r\n+  // === MEMBERS (3 active, 2 prospects) ===\r\n+  const memberUsers = await Promise.all([\r\n+    prisma.user.create({ data: { email: 'emma@gym.com', password, role: 'member', name: 'Emma Stone', clubId: chicago.id, status: 'ACTIVE' } }),\r\n+    prisma.user.create({ data: { email: 'jake@gym.com', password, role: 'member', name: 'Jake Harris', clubId: austin.id, status: 'ACTIVE' } }),\r\n+    prisma.user.create({ data: { email: 'tina@gym.com', password, role: 'member', name: 'Tina Ray', clubId: chicago.id, status: 'ACTIVE' } }),\r\n+    prisma.user.create({ data: { email: 'prospect1@gym.com', password, role: 'member', name: 'Liam Hunt', clubId: chicago.id, status: 'ACTIVE' } }),\r\n+    prisma.user.create({ data: { email: 'prospect2@gym.com', password, role: 'member', name: 'Grace Miles', clubId: austin.id, status: 'ACTIVE' } }),\r\n+  ]);\r\n \r\n-    // Generate invoices for the last 120 days\r\n-    const invoices: Array<{\r\n-      memberId: string | null;\r\n-      planName: string;\r\n-      amount: number;\r\n\\ No newline at end of file\n-      status: InvoiceStatus;\r\n-      issuedAt: Date;\r\n-      dueDate: Date;\r\n-      clubId: string;\r\n-    }> = [];\r\n+  const now = new Date();\r\n+  const nextMonth = new Date(now);\r\n+  nextMonth.setMonth(now.getMonth() + 1);\r\n+  const lastMonth = new Date(now);\r\n+  lastMonth.setMonth(now.getMonth() - 1);\r\n \r\n-    const endDate = new Date();\r\n-    const startDate = new Date();\r\n-    startDate.setDate(endDate.getDate() - 120);\r\n+  const [emma, jake, tina] = await Promise.all([\r\n+    prisma.member.create({\r\n+      data: {\r\n+        firstName: 'Emma',\r\n+        lastName: 'Stone',\r\n+        email: 'emma@gym.com',\r\n+        gender: 'female',\r\n+        clubId: chicago.id,\r\n+        userId: memberUsers[0].id,\r\n+        memberType: 'member',\r\n+      },\r\n+    }),\r\n+    prisma.member.create({\r\n+      data: {\r\n+        firstName: 'Jake',\r\n+        lastName: 'Harris',\r\n+        email: 'jake@gym.com',\r\n+        gender: 'male',\r\n+        clubId: austin.id,\r\n+        userId: memberUsers[1].id,\r\n+        memberType: 'member',\r\n+      },\r\n+    }),\r\n+    prisma.member.create({\r\n+      data: {\r\n+        firstName: 'Tina',\r\n+        lastName: 'Ray',\r\n+        email: 'tina@gym.com',\r\n+        gender: 'female',\r\n+        clubId: chicago.id,\r\n+        userId: memberUsers[2].id,\r\n+        memberType: 'member',\r\n+      },\r\n+    }),\r\n+  ]);\r\n \r\n-    // Generate 80-120 invoices with realistic distribution\r\n-    const numInvoices = Math.floor(Math.random() * 41) + 80; // 80-120 invoices\r\n+  await prisma.member.createMany({\r\n+    data: [\r\n+      {\r\n+        firstName: 'Liam',\r\n+        lastName: 'Hunt',\r\n+        email: 'prospect1@gym.com',\r\n+        gender: 'male',\r\n+        clubId: chicago.id,\r\n+        userId: memberUsers[3].id,\r\n+        memberType: 'prospect',\r\n+      },\r\n+      {\r\n+        firstName: 'Grace',\r\n+        lastName: 'Miles',\r\n+        email: 'prospect2@gym.com',\r\n+        gender: 'female',\r\n+        clubId: austin.id,\r\n+        userId: memberUsers[4].id,\r\n+        memberType: 'prospect',\r\n+      },\r\n+    ],\r\n+    skipDuplicates: true,\r\n+  });\r\n \r\n-    for (let i = 0; i < numInvoices; i++) {\r\n-      // Random date within the last 120 days\r\n-      const randomDate = new Date(\r\n-        startDate.getTime() + \r\n-        Math.random() * (endDate.getTime() - startDate.getTime())\r\n-      );\r\n+  // === MEMBERSHIP PLANS ===\r\n+  await prisma.membershipPlan.createMany({\r\n+    data: [\r\n+      {\r\n+        name: 'Monthly Unlimited',\r\n+        price: 60,\r\n+        durationInDays: 30,\r\n+        description: 'Unlimited gym access for 30 days',\r\n+      },\r\n+      {\r\n+        name: 'Annual Unlimited',\r\n+        price: 600,\r\n+        durationInDays: 365,\r\n+        description: 'Unlimited access with discounted rate',\r\n+      },\r\n+    ],\r\n+    skipDuplicates: true,\r\n+  });\r\n \r\n-      // Random club (if multiple clubs exist)\r\n-      const randomClub = clubs[Math.floor(Math.random() * clubs.length)];\r\n-      \r\n-      // Random member from the same club (if members exist)\r\n-      const clubMembers = members.filter((m: MemberData) => m.clubId === randomClub.id);\r\n-      const randomMember = clubMembers.length > 0 \r\n-        ? clubMembers[Math.floor(Math.random() * clubMembers.length)]\r\n-        : null;\r\n+  // === MEMBERSHIPS + INVOICES ===\r\n+  await prisma.membership.create({\r\n+    data: {\r\n+      memberId: emma.id,\r\n+      planName: 'Monthly Unlimited',\r\n+      startDate: now,\r\n+      endDate: nextMonth,\r\n+      autoRenew: true,\r\n+      status: 'active',\r\n+    },\r\n+  });\r\n \r\n-      // Random plan name\r\n-      const randomPlan = planNames[Math.floor(Math.random() * planNames.length)];\r\n+  await prisma.membership.create({\r\n+    data: {\r\n+      memberId: jake.id,\r\n+      planName: 'Annual Unlimited',\r\n+      startDate: lastMonth,\r\n+      endDate: nextMonth,\r\n+      autoRenew: false,\r\n+      status: 'active',\r\n+    },\r\n+  });\r\n \r\n-      // Realistic pricing based on plan type\r\n-      let amount: number;\r\n-      if (randomPlan.includes('Annual')) {\r\n-        amount = Math.floor(Math.random() * 20000) + 30000; // 30k-50k for annual\r\n-      } else if (randomPlan.includes('Premium') || randomPlan.includes('Personal Training')) {\r\n-        amount = Math.floor(Math.random() * 5000) + 8000; // 8k-13k for premium\r\n-      } else if (randomPlan.includes('Student')) {\r\n-        amount = Math.floor(Math.random() * 2000) + 2000; // 2k-4k for student\r\n-      } else if (randomPlan.includes('Family')) {\r\n-        amount = Math.floor(Math.random() * 8000) + 12000; // 12k-20k for family\r\n-      } else {\r\n-        amount = Math.floor(Math.random() * 4000) + 4000; // 4k-8k for basic\r\n-      }\r\n+  await prisma.invoice.createMany({\r\n+    data: [\r\n+      {\r\n+        memberId: emma.id,\r\n+        planName: 'Monthly Unlimited',\r\n+        amount: 60,\r\n+        clubId: chicago.id,\r\n+        status: 'paid',\r\n+        dueDate: nextMonth,\r\n+      },\r\n+      {\r\n+        memberId: jake.id,\r\n+        planName: 'Annual Unlimited',\r\n+        amount: 600,\r\n+        clubId: austin.id,\r\n+        status: 'paid',\r\n+        dueDate: nextMonth,\r\n+      },\r\n+      {\r\n+        memberId: tina.id,\r\n+        planName: 'Monthly Unlimited',\r\n+        amount: 60,\r\n+        clubId: chicago.id,\r\n+        status: 'unpaid',\r\n+        dueDate: nextMonth,\r\n+      },\r\n+    ],\r\n+  });\r\n \r\n-      // Realistic status distribution (most should be paid)\r\n-      let status: InvoiceStatus = InvoiceStatus.paid;\r\n-      const random = Math.random();\r\n-      if (random > 0.75) {\r\n-        if (random > 0.90) {\r\n-          if (random > 0.97) {\r\n-            status = InvoiceStatus.failed;\r\n-          } else {\r\n-            status = InvoiceStatus.overdue;\r\n-          }\r\n-        } else {\r\n-          status = InvoiceStatus.unpaid;\r\n-        }\r\n-      }\r\n+  // === CLASS SCHEDULE + BOOKINGS ===\r\n+  const trainer = await prisma.trainer.findFirst({ where: { email: 'alyssa@gym.com' } });\r\n+  const schedule = await prisma.classSchedule.create({\r\n+    data: {\r\n+      title: 'HIIT Bootcamp',\r\n+      date: nextMonth,\r\n+      duration: 60,\r\n+      maxCapacity: 15,\r\n+      trainerId: trainer!.id,\r\n+      clubId: chicago.id,\r\n+      classType: 'Group Session',\r\n+    },\r\n+  });\r\n \r\n-      // Due date (typically 30 days after issued date for unpaid invoices)\r\n-      const dueDate = new Date(randomDate);\r\n-      dueDate.setDate(dueDate.getDate() + 30);\r\n+  await prisma.booking.createMany({\r\n+    data: [\r\n+      { memberId: emma.id, scheduleId: schedule.id, status: 'confirmed' },\r\n+      { memberId: tina.id, scheduleId: schedule.id, status: 'waitlisted' },\r\n+    ],\r\n+  });\r\n \r\n-      invoices.push({\r\n-        memberId: randomMember?.id || null,\r\n-        planName: randomPlan,\r\n-        amount: amount,\r\n-        status: status,\r\n-        issuedAt: randomDate,\r\n-        dueDate: dueDate,\r\n-        clubId: randomClub.id\r\n-      });\r\n-    }\r\n+  // === PERMISSIONS ===\r\n+  const roles = ['super_admin', 'franchise_admin', 'trainer', 'staff'] as const;\r\n+  const keys = [\r\n+    'view_members',\r\n+    'edit_members',\r\n+    'view_reports',\r\n+    'edit_schedule',\r\n+    'manage_billing',\r\n+    'assign_trainers',\r\n+  ] as const;\r\n \r\n-    // Sort invoices by date for better logging\r\n-    invoices.sort((a, b) => a.issuedAt.getTime() - b.issuedAt.getTime());\r\n-\r\n-    console.log(`📝 Creating ${invoices.length} invoices...`);\r\n-    \r\n-    // Insert invoices in batches to avoid memory issues\r\n-    const batchSize = 20;\r\n-    let createdCount = 0;\r\n-    \r\n-    for (let i = 0; i < invoices.length; i += batchSize) {\r\n-      const batch = invoices.slice(i, i + batchSize);\r\n-      await prisma.invoice.createMany({\r\n-        data: batch,\r\n-        skipDuplicates: true\r\n+  for (const role of roles) {\r\n+    for (const key of keys) {\r\n+      await prisma.permission.upsert({\r\n+        where: { role_key: { role, key } },\r\n+        update: {},\r\n+        create: {\r\n+          role,\r\n+          key,\r\n+          allowed: role === 'super_admin',\r\n+        },\r\n       });\r\n-      createdCount += batch.length;\r\n-      console.log(`✅ Created batch ${Math.ceil((i + 1) / batchSize)}: ${createdCount}/${invoices.length} invoices`);\r\n     }\r\n+  }\r\n \r\n-    // Summary statistics\r\n-    const statusSummary: StatusSummary[] = await prisma.invoice.groupBy({\r\n-      by: ['status'],\r\n-      _count: {\r\n-        status: true\r\n-      }\r\n-    });\r\n+  // === TRAINING RESOURCES ===\r\n+  await prisma.trainingResource.createMany({\r\n+    data: [\r\n+      {\r\n+        title: 'Gym SOP PDF',\r\n+        description: 'Standard Operating Procedures',\r\n+        type: 'document',\r\n+        fileUrl: '/uploads/gym-sop.pdf',\r\n+        tags: ['operations', 'rules'],\r\n+        roles: ['staff', 'trainer'],\r\n+      },\r\n+      {\r\n+        title: 'Check-In Tutorial',\r\n+        description: 'How to check in members at front desk',\r\n+        type: 'video',\r\n+        videoUrl: 'https://www.youtube.com/watch?v=demo123',\r\n+        tags: ['checkin'],\r\n+        roles: ['franchise_admin', 'staff'],\r\n+      },\r\n+    ],\r\n+    skipDuplicates: true,\r\n+  });\r\n \r\n-    const totalRevenue = await prisma.invoice.aggregate({\r\n-      where: { status: InvoiceStatus.paid },\r\n-      _sum: { amount: true }\r\n-    });\r\n \r\n-    console.log('\\n📊 Seeding Summary:');\r\n-    console.log(`Total invoices created: ${createdCount}`);\r\n-    console.log('Status breakdown:');\r\n-    statusSummary.forEach((stat: StatusSummary) => {\r\n-      console.log(`  ${stat.status}: ${stat._count.status}`);\r\n-    });\r\n-    console.log(`Total revenue from paid invoices: Rs ${totalRevenue._sum.amount?.toLocaleString() || 0}`);\r\n \r\n-    console.log('\\n🎉 Invoice seeding completed successfully!');\r\n \r\n-  } catch (error) {\r\n-    console.error('❌ Error seeding invoices:', error);\r\n-    throw error;\r\n-  } finally {\r\n-    await prisma.$disconnect();\r\n-  }\r\n-}\r\n \r\n-// Run the seeding function\r\n-async function main(): Promise<void> {\r\n-  await seedInvoices();\r\n+  console.log('✅ Full seed complete: admins, trainers, members, plans, invoices, classes.');\r\n }\r\n \r\n main()\r\n   .catch((e) => {\r\n-    console.error('Seeding failed:', e);\r\n+    console.error('❌ Seed failed:', e);\r\n     process.exit(1);\r\n-  });\n+  })\r\n+  .finally(() => prisma.$disconnect());\r\n"
                },
                {
                    "date": 1753179794857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,365 +3,29 @@\n \r\n const prisma = new PrismaClient();\r\n \r\n async function main() {\r\n-  const password = await bcrypt.hash('password123', 10);\r\n+  const password = await bcrypt.hash('password123', 10); // You can change 'password123'\r\n \r\n-  // === SUPER ADMIN & HQ CLUB ===\r\n-  const hq = await prisma.club.upsert({\r\n-    where: { id: 'club1' },\r\n-    update: {},\r\n-    create: {\r\n-      id: 'club1',\r\n-      name: 'Gym Fitness HQ',\r\n-      location: 'New York, NY',\r\n-      timezone: 'America/New_York',\r\n-      clubEmail: 'hq@gymfitness.com',\r\n-    },\r\n-  });\r\n-\r\n+  // === SUPER ADMIN USER ===\r\n   await prisma.user.upsert({\r\n     where: { email: 'super@gym.com' },\r\n     update: {},\r\n     create: {\r\n       email: 'super@gym.com',\r\n       password,\r\n       role: 'super_admin',\r\n-      name: 'Mike Bell',\r\n-      clubId: hq.id,\r\n+      name: 'Super Admin',\r\n+      clubId: null, // Set to null for a global super admin\r\n       status: 'ACTIVE',\r\n     },\r\n   });\r\n \r\n-  // === FRANCHISE CLUBS + ADMINS ===\r\n-  const chicago = await prisma.club.create({\r\n-    data: {\r\n-      name: 'Gym Chicago',\r\n-      location: 'Chicago, IL',\r\n-      timezone: 'America/Chicago',\r\n-      clubEmail: 'chicago@gymfitness.com',\r\n-    },\r\n-  });\r\n-\r\n-  const austin = await prisma.club.create({\r\n-    data: {\r\n-      name: 'Gym Austin',\r\n-      location: 'Austin, TX',\r\n-      timezone: 'America/Chicago',\r\n-      clubEmail: 'austin@gymfitness.com',\r\n-    },\r\n-  });\r\n-\r\n-  await prisma.user.createMany({\r\n-    data: [\r\n-      {\r\n-        email: 'franchise.chicago@gym.com',\r\n-        password,\r\n-        role: 'franchise_admin',\r\n-        name: 'Jennifer Adams',\r\n-        clubId: chicago.id,\r\n-        status: 'ACTIVE',\r\n-      },\r\n-      {\r\n-        email: 'franchise.austin@gym.com',\r\n-        password,\r\n-        role: 'franchise_admin',\r\n-        name: 'Robert Chan',\r\n-        clubId: austin.id,\r\n-        status: 'ACTIVE',\r\n-      },\r\n-    ],\r\n-    skipDuplicates: true,\r\n-  });\r\n-\r\n-  // === TRAINERS (linked to Users) ===\r\n-  const trainerUsers = await Promise.all([\r\n-    prisma.user.create({\r\n-      data: {\r\n-        email: 'alyssa@gym.com',\r\n-        password,\r\n-        role: 'trainer',\r\n-        name: 'Alyssa Kathan',\r\n-        clubId: chicago.id,\r\n-        status: 'ACTIVE',\r\n-      },\r\n-    }),\r\n-    prisma.user.create({\r\n-      data: {\r\n-        email: 'jordan@gym.com',\r\n-        password,\r\n-        role: 'trainer',\r\n-        name: 'Jordan Sparks',\r\n-        clubId: austin.id,\r\n-        status: 'ACTIVE',\r\n-      },\r\n-    }),\r\n-    prisma.user.create({\r\n-      data: {\r\n-        email: 'david@gym.com',\r\n-        password,\r\n-        role: 'trainer',\r\n-        name: 'David Mills',\r\n-        clubId: chicago.id,\r\n-        status: 'ACTIVE',\r\n-      },\r\n-    }),\r\n-  ]);\r\n-\r\n-  await prisma.trainer.createMany({\r\n-    data: [\r\n-      {\r\n-        name: 'Alyssa Kathan',\r\n-        email: 'alyssa@gym.com',\r\n-        clubId: chicago.id,\r\n-        userId: trainerUsers[0].id,\r\n-        specialization: 'Strength Training',\r\n-        phone: '312-555-1234',\r\n-      },\r\n-      {\r\n-        name: 'Jordan Sparks',\r\n-        email: 'jordan@gym.com',\r\n-        clubId: austin.id,\r\n-        userId: trainerUsers[1].id,\r\n-        specialization: 'HIIT & Cardio',\r\n-        phone: '737-555-6543',\r\n-      },\r\n-      {\r\n-        name: 'David Mills',\r\n-        email: 'david@gym.com',\r\n-        clubId: chicago.id,\r\n-        userId: trainerUsers[2].id,\r\n-        specialization: 'Functional Mobility',\r\n-        phone: '773-555-7890',\r\n-      },\r\n-    ],\r\n-    skipDuplicates: true,\r\n-  });\r\n-\r\n-  // === MEMBERS (3 active, 2 prospects) ===\r\n-  const memberUsers = await Promise.all([\r\n-    prisma.user.create({ data: { email: 'emma@gym.com', password, role: 'member', name: 'Emma Stone', clubId: chicago.id, status: 'ACTIVE' } }),\r\n-    prisma.user.create({ data: { email: 'jake@gym.com', password, role: 'member', name: 'Jake Harris', clubId: austin.id, status: 'ACTIVE' } }),\r\n-    prisma.user.create({ data: { email: 'tina@gym.com', password, role: 'member', name: 'Tina Ray', clubId: chicago.id, status: 'ACTIVE' } }),\r\n-    prisma.user.create({ data: { email: 'prospect1@gym.com', password, role: 'member', name: 'Liam Hunt', clubId: chicago.id, status: 'ACTIVE' } }),\r\n-    prisma.user.create({ data: { email: 'prospect2@gym.com', password, role: 'member', name: 'Grace Miles', clubId: austin.id, status: 'ACTIVE' } }),\r\n-  ]);\r\n-\r\n-  const now = new Date();\r\n-  const nextMonth = new Date(now);\r\n-  nextMonth.setMonth(now.getMonth() + 1);\r\n-  const lastMonth = new Date(now);\r\n-  lastMonth.setMonth(now.getMonth() - 1);\r\n-\r\n-  const [emma, jake, tina] = await Promise.all([\r\n-    prisma.member.create({\r\n-      data: {\r\n-        firstName: 'Emma',\r\n-        lastName: 'Stone',\r\n-        email: 'emma@gym.com',\r\n-        gender: 'female',\r\n-        clubId: chicago.id,\r\n-        userId: memberUsers[0].id,\r\n-        memberType: 'member',\r\n-      },\r\n-    }),\r\n-    prisma.member.create({\r\n-      data: {\r\n-        firstName: 'Jake',\r\n-        lastName: 'Harris',\r\n-        email: 'jake@gym.com',\r\n-        gender: 'male',\r\n-        clubId: austin.id,\r\n-        userId: memberUsers[1].id,\r\n-        memberType: 'member',\r\n-      },\r\n-    }),\r\n-    prisma.member.create({\r\n-      data: {\r\n-        firstName: 'Tina',\r\n-        lastName: 'Ray',\r\n-        email: 'tina@gym.com',\r\n-        gender: 'female',\r\n-        clubId: chicago.id,\r\n-        userId: memberUsers[2].id,\r\n-        memberType: 'member',\r\n-      },\r\n-    }),\r\n-  ]);\r\n-\r\n-  await prisma.member.createMany({\r\n-    data: [\r\n-      {\r\n-        firstName: 'Liam',\r\n-        lastName: 'Hunt',\r\n-        email: 'prospect1@gym.com',\r\n-        gender: 'male',\r\n-        clubId: chicago.id,\r\n-        userId: memberUsers[3].id,\r\n-        memberType: 'prospect',\r\n-      },\r\n-      {\r\n-        firstName: 'Grace',\r\n-        lastName: 'Miles',\r\n-        email: 'prospect2@gym.com',\r\n-        gender: 'female',\r\n-        clubId: austin.id,\r\n-        userId: memberUsers[4].id,\r\n-        memberType: 'prospect',\r\n-      },\r\n-    ],\r\n-    skipDuplicates: true,\r\n-  });\r\n-\r\n-  // === MEMBERSHIP PLANS ===\r\n-  await prisma.membershipPlan.createMany({\r\n-    data: [\r\n-      {\r\n-        name: 'Monthly Unlimited',\r\n-        price: 60,\r\n-        durationInDays: 30,\r\n-        description: 'Unlimited gym access for 30 days',\r\n-      },\r\n-      {\r\n-        name: 'Annual Unlimited',\r\n-        price: 600,\r\n-        durationInDays: 365,\r\n-        description: 'Unlimited access with discounted rate',\r\n-      },\r\n-    ],\r\n-    skipDuplicates: true,\r\n-  });\r\n-\r\n-  // === MEMBERSHIPS + INVOICES ===\r\n-  await prisma.membership.create({\r\n-    data: {\r\n-      memberId: emma.id,\r\n-      planName: 'Monthly Unlimited',\r\n-      startDate: now,\r\n-      endDate: nextMonth,\r\n-      autoRenew: true,\r\n-      status: 'active',\r\n-    },\r\n-  });\r\n-\r\n-  await prisma.membership.create({\r\n-    data: {\r\n-      memberId: jake.id,\r\n-      planName: 'Annual Unlimited',\r\n-      startDate: lastMonth,\r\n-      endDate: nextMonth,\r\n-      autoRenew: false,\r\n-      status: 'active',\r\n-    },\r\n-  });\r\n-\r\n-  await prisma.invoice.createMany({\r\n-    data: [\r\n-      {\r\n-        memberId: emma.id,\r\n-        planName: 'Monthly Unlimited',\r\n-        amount: 60,\r\n-        clubId: chicago.id,\r\n-        status: 'paid',\r\n-        dueDate: nextMonth,\r\n-      },\r\n-      {\r\n-        memberId: jake.id,\r\n-        planName: 'Annual Unlimited',\r\n-        amount: 600,\r\n-        clubId: austin.id,\r\n-        status: 'paid',\r\n-        dueDate: nextMonth,\r\n-      },\r\n-      {\r\n-        memberId: tina.id,\r\n-        planName: 'Monthly Unlimited',\r\n-        amount: 60,\r\n-        clubId: chicago.id,\r\n-        status: 'unpaid',\r\n-        dueDate: nextMonth,\r\n-      },\r\n-    ],\r\n-  });\r\n-\r\n-  // === CLASS SCHEDULE + BOOKINGS ===\r\n-  const trainer = await prisma.trainer.findFirst({ where: { email: 'alyssa@gym.com' } });\r\n-  const schedule = await prisma.classSchedule.create({\r\n-    data: {\r\n-      title: 'HIIT Bootcamp',\r\n-      date: nextMonth,\r\n-      duration: 60,\r\n-      maxCapacity: 15,\r\n-      trainerId: trainer!.id,\r\n-      clubId: chicago.id,\r\n-      classType: 'Group Session',\r\n-    },\r\n-  });\r\n-\r\n-  await prisma.booking.createMany({\r\n-    data: [\r\n-      { memberId: emma.id, scheduleId: schedule.id, status: 'confirmed' },\r\n-      { memberId: tina.id, scheduleId: schedule.id, status: 'waitlisted' },\r\n-    ],\r\n-  });\r\n-\r\n-  // === PERMISSIONS ===\r\n-  const roles = ['super_admin', 'franchise_admin', 'trainer', 'staff'] as const;\r\n-  const keys = [\r\n-    'view_members',\r\n-    'edit_members',\r\n-    'view_reports',\r\n-    'edit_schedule',\r\n-    'manage_billing',\r\n-    'assign_trainers',\r\n-  ] as const;\r\n-\r\n-  for (const role of roles) {\r\n-    for (const key of keys) {\r\n-      await prisma.permission.upsert({\r\n-        where: { role_key: { role, key } },\r\n-        update: {},\r\n-        create: {\r\n-          role,\r\n-          key,\r\n-          allowed: role === 'super_admin',\r\n-        },\r\n-      });\r\n-    }\r\n-  }\r\n-\r\n-  // === TRAINING RESOURCES ===\r\n-  await prisma.trainingResource.createMany({\r\n-    data: [\r\n-      {\r\n-        title: 'Gym SOP PDF',\r\n-        description: 'Standard Operating Procedures',\r\n-        type: 'document',\r\n-        fileUrl: '/uploads/gym-sop.pdf',\r\n-        tags: ['operations', 'rules'],\r\n-        roles: ['staff', 'trainer'],\r\n-      },\r\n-      {\r\n-        title: 'Check-In Tutorial',\r\n-        description: 'How to check in members at front desk',\r\n-        type: 'video',\r\n-        videoUrl: 'https://www.youtube.com/watch?v=demo123',\r\n-        tags: ['checkin'],\r\n-        roles: ['franchise_admin', 'staff'],\r\n-      },\r\n-    ],\r\n-    skipDuplicates: true,\r\n-  });\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-  console.log('✅ Full seed complete: admins, trainers, members, plans, invoices, classes.');\r\n+  console.log('✅ Seed complete: Super admin user created.');\r\n }\r\n \r\n main()\r\n   .catch((e) => {\r\n     console.error('❌ Seed failed:', e);\r\n     process.exit(1);\r\n   })\r\n-  .finally(() => prisma.$disconnect());\r\n+  .finally(() => prisma.$disconnect());\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753179884976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,10 @@\n     create: {\r\n       email: 'super@gym.com',\r\n       password,\r\n       role: 'super_admin',\r\n-      name: 'Super Admin',\r\n-      clubId: null, // Set to null for a global super admin\r\n+      name: 'Super Admin', // Ensure this line matches your schema\r\n+      clubId: null,\r\n       status: 'ACTIVE',\r\n     },\r\n   });\r\n \r\n"
                },
                {
                    "date": 1753180255047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,22 +5,35 @@\n \r\n async function main() {\r\n   const password = await bcrypt.hash('password123', 10); // You can change 'password123'\r\n \r\n-  // === SUPER ADMIN USER ===\r\n+\r\n   await prisma.user.upsert({\r\n-    where: { email: 'super@gym.com' },\r\n+    where: { email: 'Austinfranchise@gym.com' },\r\n     update: {},\r\n     create: {\r\n-      email: 'super@gym.com',\r\n+      email: 'Austinfranchise@gym.com',\r\n       password,\r\n-      role: 'super_admin',\r\n-      name: 'Super Admin', // Ensure this line matches your schema\r\n-      clubId: null,\r\n+      role: 'franchise_admin',\r\n+      name: 'Franchise Admin', // Ensure this line matches your schema\r\n+      clubId: 'club1',\r\n       status: 'ACTIVE',\r\n     },\r\n   });\r\n \r\n+   await prisma.user.upsert({\r\n+    where: { email: 'Chicagofranchise@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      email: 'Chicagofranchise@gym.com',\r\n+      password,\r\n+      role: 'franchise_admin',\r\n+      name: 'Franchise Admin', // Ensure this line matches your schema\r\n+      clubId: 'club2',\r\n+      status: 'ACTIVE',\r\n+    },\r\n+  });\r\n+\r\n   console.log('✅ Seed complete: Super admin user created.');\r\n }\r\n \r\n main()\r\n"
                },
                {
                    "date": 1753180489975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,36 +5,89 @@\n \r\n async function main() {\r\n   const password = await bcrypt.hash('password123', 10); // You can change 'password123'\r\n \r\n+  // === SUPER ADMIN USER (if you want to include it, otherwise remove this block) ===\r\n+  // If you want super_admin to be created first (with clubId: null for global view)\r\n+  await prisma.user.upsert({\r\n+    where: { email: 'super@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      email: 'super@gym.com',\r\n+      password,\r\n+      role: 'super_admin',\r\n+      name: 'Super Admin',\r\n+      clubId: null,\r\n+      status: 'ACTIVE',\r\n+    },\r\n+  });\r\n+  console.log('Seeded: Super Admin');\r\n \r\n+\r\n+  // === FRANCHISE CLUBS ===\r\n+  // Create Club 1\r\n+  const club1 = await prisma.club.upsert({ // Using upsert to prevent re-creation if ID exists\r\n+    where: { id: 'club1' },\r\n+    update: {},\r\n+    create: {\r\n+      id: 'club1', // Explicitly setting ID as 'club1'\r\n+      name: 'Gym Franchise One',\r\n+      location: 'New York, NY',\r\n+      timezone: 'America/New_York',\r\n+      clubEmail: 'club1@gym.com',\r\n+    },\r\n+  });\r\n+  console.log('Seeded: Club 1 (ID:', club1.id, ')');\r\n+\r\n+  // Create Club 2\r\n+  const club2 = await prisma.club.upsert({ // Using upsert\r\n+    where: { id: 'club2' },\r\n+    update: {},\r\n+    create: {\r\n+      id: 'club2', // Explicitly setting ID as 'club2'\r\n+      name: 'Gym Franchise Two',\r\n+      location: 'Los Angeles, CA',\r\n+      timezone: 'America/Los_Angeles',\r\n+      clubEmail: 'club2@gym.com',\r\n+    },\r\n+  });\r\n+  console.log('Seeded: Club 2 (ID:', club2.id, ')');\r\n+\r\n+\r\n+  // === FRANCHISE ADMIN USERS ===\r\n+  // Create Franchise Admin for Club 1\r\n   await prisma.user.upsert({\r\n-    where: { email: 'Austinfranchise@gym.com' },\r\n+    where: { email: 'Austinfranchise@gym.com' }, // Assuming this is for Club 1, update email if needed\r\n     update: {},\r\n     create: {\r\n       email: 'Austinfranchise@gym.com',\r\n       password,\r\n       role: 'franchise_admin',\r\n-      name: 'Franchise Admin', // Ensure this line matches your schema\r\n-      clubId: 'club1',\r\n+      name: 'Austin Franchise Admin', // Better name specificity\r\n+      clubId: club1.id, // Referencing the ID of club1\r\n       status: 'ACTIVE',\r\n     },\r\n   });\r\n+  console.log('Seeded: Austin Franchise Admin');\r\n \r\n-   await prisma.user.upsert({\r\n-    where: { email: 'Chicagofranchise@gym.com' },\r\n+\r\n+  // Create Franchise Admin for Club 2\r\n+  await prisma.user.upsert({\r\n+    where: { email: 'Chicagofranchise@gym.com' }, // Assuming this is for Club 2, update email if needed\r\n     update: {},\r\n     create: {\r\n       email: 'Chicagofranchise@gym.com',\r\n       password,\r\n       role: 'franchise_admin',\r\n-      name: 'Franchise Admin', // Ensure this line matches your schema\r\n-      clubId: 'club2',\r\n+      name: 'Chicago Franchise Admin', // Better name specificity\r\n+      clubId: club2.id, // Referencing the ID of club2\r\n       status: 'ACTIVE',\r\n     },\r\n   });\r\n+  console.log('Seeded: Chicago Franchise Admin');\r\n \r\n-  console.log('✅ Seed complete: Super admin user created.');\r\n+\r\n+  console.log('✅ Seed complete: Franchise clubs and admins created.');\r\n }\r\n \r\n main()\r\n   .catch((e) => {\r\n"
                },
                {
                    "date": 1753180954971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,97 +0,0 @@\n-import { PrismaClient } from '@prisma/client';\r\n-import bcrypt from 'bcryptjs';\r\n-\r\n-const prisma = new PrismaClient();\r\n-\r\n-async function main() {\r\n-  const password = await bcrypt.hash('password123', 10); // You can change 'password123'\r\n-\r\n-  // === SUPER ADMIN USER (if you want to include it, otherwise remove this block) ===\r\n-  // If you want super_admin to be created first (with clubId: null for global view)\r\n-  await prisma.user.upsert({\r\n-    where: { email: 'super@gym.com' },\r\n-    update: {},\r\n-    create: {\r\n-      email: 'super@gym.com',\r\n-      password,\r\n-      role: 'super_admin',\r\n-      name: 'Super Admin',\r\n-      clubId: null,\r\n-      status: 'ACTIVE',\r\n-    },\r\n-  });\r\n-  console.log('Seeded: Super Admin');\r\n-\r\n-\r\n-  // === FRANCHISE CLUBS ===\r\n-  // Create Club 1\r\n-  const club1 = await prisma.club.upsert({ // Using upsert to prevent re-creation if ID exists\r\n-    where: { id: 'club1' },\r\n-    update: {},\r\n-    create: {\r\n-      id: 'club1', // Explicitly setting ID as 'club1'\r\n-      name: 'Gym Franchise One',\r\n-      location: 'New York, NY',\r\n-      timezone: 'America/New_York',\r\n-      clubEmail: 'club1@gym.com',\r\n-    },\r\n-  });\r\n-  console.log('Seeded: Club 1 (ID:', club1.id, ')');\r\n-\r\n-  // Create Club 2\r\n-  const club2 = await prisma.club.upsert({ // Using upsert\r\n-    where: { id: 'club2' },\r\n-    update: {},\r\n-    create: {\r\n-      id: 'club2', // Explicitly setting ID as 'club2'\r\n-      name: 'Gym Franchise Two',\r\n-      location: 'Los Angeles, CA',\r\n-      timezone: 'America/Los_Angeles',\r\n-      clubEmail: 'club2@gym.com',\r\n-    },\r\n-  });\r\n-  console.log('Seeded: Club 2 (ID:', club2.id, ')');\r\n-\r\n-\r\n-  // === FRANCHISE ADMIN USERS ===\r\n-  // Create Franchise Admin for Club 1\r\n-  await prisma.user.upsert({\r\n-    where: { email: 'Austinfranchise@gym.com' }, // Assuming this is for Club 1, update email if needed\r\n-    update: {},\r\n-    create: {\r\n-      email: 'Austinfranchise@gym.com',\r\n-      password,\r\n-      role: 'franchise_admin',\r\n-      name: 'Austin Franchise Admin', // Better name specificity\r\n-      clubId: club1.id, // Referencing the ID of club1\r\n-      status: 'ACTIVE',\r\n-    },\r\n-  });\r\n-  console.log('Seeded: Austin Franchise Admin');\r\n-\r\n-\r\n-  // Create Franchise Admin for Club 2\r\n-  await prisma.user.upsert({\r\n-    where: { email: 'Chicagofranchise@gym.com' }, // Assuming this is for Club 2, update email if needed\r\n-    update: {},\r\n-    create: {\r\n-      email: 'Chicagofranchise@gym.com',\r\n-      password,\r\n-      role: 'franchise_admin',\r\n-      name: 'Chicago Franchise Admin', // Better name specificity\r\n-      clubId: club2.id, // Referencing the ID of club2\r\n-      status: 'ACTIVE',\r\n-    },\r\n-  });\r\n-  console.log('Seeded: Chicago Franchise Admin');\r\n-\r\n-\r\n-  console.log('✅ Seed complete: Franchise clubs and admins created.');\r\n-}\r\n-\r\n-main()\r\n-  .catch((e) => {\r\n-    console.error('❌ Seed failed:', e);\r\n-    process.exit(1);\r\n-  })\r\n-  .finally(() => prisma.$disconnect());\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753180997488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,501 @@\n+import { PrismaClient } from '@prisma/client';\r\n+import bcrypt from 'bcryptjs';\r\n+import jwt from 'jsonwebtoken'; // For generating mock setup tokens\r\n+\r\n+const prisma = new PrismaClient();\r\n+\r\n+// Helper to generate a future date for token expiry (e.g., 24 hours from now)\r\n+const getFutureDate = (days: number) => {\r\n+  const date = new Date();\r\n+  date.setDate(date.getDate() + days);\r\n+  return date;\r\n+};\r\n+\r\n+async function main() {\r\n+  const hashedPassword = await bcrypt.hash('password123', 10); // Standard password for active users\r\n+  const JWT_SECRET_MOCK = process.env.JWT_SECRET || 'your-super-secret-jwt-key-for-seed'; // Use your actual JWT_SECRET in .env!\r\n+\r\n+  // Clear existing data (optional, but good for a fresh seed)\r\n+  // await prisma.booking.deleteMany();\r\n+  // await prisma.classSchedule.deleteMany();\r\n+  // await prisma.invoice.deleteMany();\r\n+  // await prisma.membership.deleteMany();\r\n+  // await prisma.membershipPlan.deleteMany();\r\n+  // await prisma.trainer.deleteMany();\r\n+  // await prisma.member.deleteMany();\r\n+  // await prisma.lead.deleteMany();\r\n+  // await prisma.communication.deleteMany();\r\n+  // await prisma.device.deleteMany();\r\n+  // await prisma.permission.deleteMany();\r\n+  // await prisma.trainingResource.deleteMany();\r\n+  // await prisma.productTransactionItem.deleteMany();\r\n+  // await prisma.productTransaction.deleteMany();\r\n+  // await prisma.product.deleteMany();\r\n+  // await prisma.task.deleteMany();\r\n+  // await prisma.attendance.deleteMany();\r\n+  // await prisma.user.deleteMany();\r\n+  // await prisma.club.deleteMany();\r\n+  // console.log('Cleared existing data.');\r\n+\r\n+  // --- CLUBS ---\r\n+  const hqClub = await prisma.club.upsert({\r\n+    where: { id: 'clb_hq' }, // Using a custom ID for HQ\r\n+    update: {},\r\n+    create: {\r\n+      id: 'clb_hq',\r\n+      name: 'Gym Fitness HQ',\r\n+      location: 'New York, NY',\r\n+      timezone: 'America/New_York',\r\n+      clubEmail: 'hq@gymfitness.com',\r\n+    },\r\n+  });\r\n+  console.log('Seeded: HQ Club (ID: clb_hq)');\r\n+\r\n+  const chicagoClub = await prisma.club.create({\r\n+    data: {\r\n+      name: 'Gym Chicago',\r\n+      location: 'Chicago, IL',\r\n+      timezone: 'America/Chicago',\r\n+      clubEmail: 'chicago@gymfitness.com',\r\n+    },\r\n+  });\r\n+  console.log('Seeded: Chicago Club (ID:', chicagoClub.id, ')');\r\n+\r\n+  const austinClub = await prisma.club.create({\r\n+    data: {\r\n+      name: 'Gym Austin',\r\n+      location: 'Austin, TX',\r\n+      timezone: 'America/Chicago',\r\n+      clubEmail: 'austin@gymfitness.com',\r\n+    },\r\n+  });\r\n+  console.log('Seeded: Austin Club (ID:', austinClub.id, ')');\r\n+\r\n+  // --- USERS ---\r\n+  // Super Admin (ACTIVE)\r\n+  await prisma.user.upsert({\r\n+    where: { email: 'super@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      email: 'super@gym.com',\r\n+      password: hashedPassword,\r\n+      role: 'super_admin',\r\n+      name: 'Super Admin',\r\n+      clubId: null, // Global access\r\n+      status: 'ACTIVE',\r\n+    },\r\n+  });\r\n+  console.log('Seeded: Super Admin User (super@gym.com)');\r\n+\r\n+  // Franchise Admins (ACTIVE)\r\n+  const franchiseChicagoUser = await prisma.user.upsert({\r\n+    where: { email: 'franchise.chicago@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      email: 'franchise.chicago@gym.com',\r\n+      password: hashedPassword,\r\n+      role: 'franchise_admin',\r\n+      name: 'Jennifer Adams',\r\n+      clubId: chicagoClub.id,\r\n+      status: 'ACTIVE',\r\n+    },\r\n+  });\r\n+  console.log('Seeded: Franchise Admin (franchise.chicago@gym.com)');\r\n+\r\n+  const franchiseAustinUser = await prisma.user.upsert({\r\n+    where: { email: 'franchise.austin@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      email: 'franchise.austin@gym.com',\r\n+      password: hashedPassword,\r\n+      role: 'franchise_admin',\r\n+      name: 'Robert Chan',\r\n+      clubId: austinClub.id,\r\n+      status: 'ACTIVE',\r\n+    },\r\n+  });\r\n+  console.log('Seeded: Franchise Admin (franchise.austin@gym.com)');\r\n+\r\n+  // Trainers (PENDING - for password setup)\r\n+  const trainerAlyssaUser = await prisma.user.upsert({\r\n+    where: { email: 'alyssa@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      email: 'alyssa@gym.com',\r\n+      // No password initially\r\n+      role: 'trainer',\r\n+      name: 'Alyssa Kathan',\r\n+      clubId: chicagoClub.id,\r\n+      status: 'PENDING',\r\n+      setupPasswordToken: jwt.sign({ userId: 'mock-alyssa-id', email: 'alyssa@gym.com' }, JWT_SECRET_MOCK, { expiresIn: '1d' }), // Mock token\r\n+      setupPasswordExpires: getFutureDate(1),\r\n+    },\r\n+  });\r\n+  console.log('Seeded: Trainer User (alyssa@gym.com) - PENDING');\r\n+\r\n+\r\n+  const trainerJordanUser = await prisma.user.upsert({\r\n+    where: { email: 'jordan@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      email: 'jordan@gym.com',\r\n+      // No password initially\r\n+      role: 'trainer',\r\n+      name: 'Jordan Sparks',\r\n+      clubId: austinClub.id,\r\n+      status: 'PENDING',\r\n+      setupPasswordToken: jwt.sign({ userId: 'mock-jordan-id', email: 'jordan@gym.com' }, JWT_SECRET_MOCK, { expiresIn: '1d' }), // Mock token\r\n+      setupPasswordExpires: getFutureDate(1),\r\n+    },\r\n+  });\r\n+  console.log('Seeded: Trainer User (jordan@gym.com) - PENDING');\r\n+\r\n+  // Staff (PENDING - for password setup)\r\n+  const staffUser = await prisma.user.upsert({\r\n+    where: { email: 'staff@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      email: 'staff@gym.com',\r\n+      // No password initially\r\n+      role: 'staff',\r\n+      name: 'Sarah Staff',\r\n+      clubId: chicagoClub.id,\r\n+      status: 'PENDING',\r\n+      setupPasswordToken: jwt.sign({ userId: 'mock-staff-id', email: 'staff@gym.com' }, JWT_SECRET_MOCK, { expiresIn: '1d' }), // Mock token\r\n+      setupPasswordExpires: getFutureDate(1),\r\n+    },\r\n+  });\r\n+  console.log('Seeded: Staff User (staff@gym.com) - PENDING');\r\n+\r\n+  // Members (some ACTIVE, some PENDING)\r\n+  const memberEmmaUser = await prisma.user.upsert({\r\n+    where: { email: 'emma@gym.com' },\r\n+    update: {},\r\n+    create: { email: 'emma@gym.com', password: hashedPassword, role: 'member', name: 'Emma Stone', clubId: chicagoClub.id, status: 'ACTIVE' }\r\n+  });\r\n+  console.log('Seeded: Member User (emma@gym.com) - ACTIVE');\r\n+\r\n+  const memberJakeUser = await prisma.user.upsert({\r\n+    where: { email: 'jake@gym.com' },\r\n+    update: {},\r\n+    create: { email: 'jake@gym.com', password: hashedPassword, role: 'member', name: 'Jake Harris', clubId: austinClub.id, status: 'ACTIVE' }\r\n+  });\r\n+  console.log('Seeded: Member User (jake@gym.com) - ACTIVE');\r\n+\r\n+  const memberTinaUser = await prisma.user.upsert({\r\n+    where: { email: 'tina@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      email: 'tina@gym.com',\r\n+      // No password initially\r\n+      role: 'member',\r\n+      name: 'Tina Ray',\r\n+      clubId: chicagoClub.id,\r\n+      status: 'PENDING',\r\n+      setupPasswordToken: jwt.sign({ userId: 'mock-tina-id', email: 'tina@gym.com' }, JWT_SECRET_MOCK, { expiresIn: '1d' }), // Mock token\r\n+      setupPasswordExpires: getFutureDate(1),\r\n+    }\r\n+  });\r\n+  console.log('Seeded: Member User (tina@gym.com) - PENDING');\r\n+\r\n+\r\n+  // --- TRAINER PROFILES ---\r\n+  const trainerAlyssa = await prisma.trainer.upsert({\r\n+    where: { email: 'alyssa@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      name: 'Alyssa Kathan',\r\n+      email: 'alyssa@gym.com',\r\n+      clubId: chicagoClub.id,\r\n+      userId: trainerAlyssaUser.id, // Link to the user created above\r\n+      specialization: 'Strength Training',\r\n+      phone: '312-555-1234',\r\n+    },\r\n+  });\r\n+  console.log('Seeded: Trainer Profile (Alyssa Kathan)');\r\n+\r\n+  const trainerJordan = await prisma.trainer.upsert({\r\n+    where: { email: 'jordan@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      name: 'Jordan Sparks',\r\n+      email: 'jordan@gym.com',\r\n+      clubId: austinClub.id,\r\n+      userId: trainerJordanUser.id, // Link to the user created above\r\n+      specialization: 'HIIT & Cardio',\r\n+      phone: '737-555-6543',\r\n+    },\r\n+  });\r\n+  console.log('Seeded: Trainer Profile (Jordan Sparks)');\r\n+\r\n+  // --- MEMBER PROFILES ---\r\n+  const emmaMember = await prisma.member.upsert({\r\n+    where: { email: 'emma@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      firstName: 'Emma',\r\n+      lastName: 'Stone',\r\n+      email: 'emma@gym.com',\r\n+      gender: 'female',\r\n+      clubId: chicagoClub.id,\r\n+      userId: memberEmmaUser.id,\r\n+      memberType: 'member',\r\n+      joiningDate: new Date('2024-01-15'),\r\n+    },\r\n+  });\r\n+  console.log('Seeded: Member Profile (Emma Stone)');\r\n+\r\n+  const jakeMember = await prisma.member.upsert({\r\n+    where: { email: 'jake@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      firstName: 'Jake',\r\n+      lastName: 'Harris',\r\n+      email: 'jake@gym.com',\r\n+      gender: 'male',\r\n+      clubId: austinClub.id,\r\n+      userId: memberJakeUser.id,\r\n+      memberType: 'member',\r\n+      joiningDate: new Date('2024-03-01'),\r\n+    },\r\n+  });\r\n+  console.log('Seeded: Member Profile (Jake Harris)');\r\n+\r\n+  const tinaMember = await prisma.member.upsert({\r\n+    where: { email: 'tina@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      firstName: 'Tina',\r\n+      lastName: 'Ray',\r\n+      email: 'tina@gym.com',\r\n+      gender: 'female',\r\n+      clubId: chicagoClub.id,\r\n+      userId: memberTinaUser.id, // Link to PENDING user\r\n+      memberType: 'member',\r\n+      joiningDate: new Date('2024-02-10'),\r\n+    },\r\n+  });\r\n+  console.log('Seeded: Member Profile (Tina Ray)');\r\n+\r\n+  // --- MEMBERSHIP PLANS ---\r\n+  const monthlyUnlimited = await prisma.membershipPlan.upsert({\r\n+    where: { name: 'Monthly Unlimited' },\r\n+    update: {},\r\n+    create: { name: 'Monthly Unlimited', price: 60, durationInDays: 30, description: 'Unlimited gym access for 30 days' },\r\n+  });\r\n+  const annualUnlimited = await prisma.membershipPlan.upsert({\r\n+    where: { name: 'Annual Unlimited' },\r\n+    update: {},\r\n+    create: { name: 'Annual Unlimited', price: 600, durationInDays: 365, description: 'Unlimited access with discounted rate' },\r\n+  });\r\n+  console.log('Seeded: Membership Plans');\r\n+\r\n+\r\n+  // --- INVOICES (for revenue trend over last few months) ---\r\n+  const today = new Date();\r\n+  const getInvoiceDate = (monthsAgo: number, day: number) => {\r\n+    return new Date(today.getFullYear(), today.getMonth() - monthsAgo, day);\r\n+  };\r\n+\r\n+  await prisma.invoice.createMany({\r\n+    data: [\r\n+      // Emma (Chicago) - Monthly, paid for 3 months\r\n+      { memberId: emmaMember.id, planName: monthlyUnlimited.name, amount: monthlyUnlimited.price, clubId: chicagoClub.id, status: 'paid', issuedAt: getInvoiceDate(3, 15), dueDate: getInvoiceDate(2, 15) },\r\n+      { memberId: emmaMember.id, planName: monthlyUnlimited.name, amount: monthlyUnlimited.price, clubId: chicagoClub.id, status: 'paid', issuedAt: getInvoiceDate(2, 15), dueDate: getInvoiceDate(1, 15) },\r\n+      { memberId: emmaMember.id, planName: monthlyUnlimited.name, amount: monthlyUnlimited.price, clubId: chicagoClub.id, status: 'paid', issuedAt: getInvoiceDate(1, 15), dueDate: getInvoiceDate(0, 15) },\r\n+      // Jake (Austin) - Annual, paid once\r\n+      { memberId: jakeMember.id, planName: annualUnlimited.name, amount: annualUnlimited.price, clubId: austinClub.id, status: 'paid', issuedAt: getInvoiceDate(4, 10), dueDate: getInvoiceDate(3, 10) },\r\n+      // Tina (Chicago) - Monthly, unpaid\r\n+      { memberId: tinaMember.id, planName: monthlyUnlimited.name, amount: monthlyUnlimited.price, clubId: chicagoClub.id, status: 'unpaid', issuedAt: today, dueDate: getFutureDate(7) },\r\n+    ],\r\n+    skipDuplicates: true, // Use skipDuplicates if running multiple times without full reset\r\n+  });\r\n+  console.log('Seeded: Invoices');\r\n+\r\n+\r\n+  // --- CLASS SCHEDULES & BOOKINGS ---\r\n+  const classDate = getFutureDate(5); // 5 days from now\r\n+  const hiitClass = await prisma.classSchedule.upsert({\r\n+    where: { id: 'class_hiit_chicago' }, // Custom ID for upsert\r\n+    update: {},\r\n+    create: {\r\n+      id: 'class_hiit_chicago',\r\n+      title: 'HIIT Bootcamp',\r\n+      date: classDate,\r\n+      duration: 60,\r\n+      maxCapacity: 15,\r\n+      trainerId: trainerAlyssa.id,\r\n+      clubId: chicagoClub.id,\r\n+      classType: 'Group Session',\r\n+      status: 'scheduled',\r\n+    },\r\n+  });\r\n+  console.log('Seeded: HIIT Bootcamp Class Schedule');\r\n+\r\n+  await prisma.booking.createMany({\r\n+    data: [\r\n+      { memberId: emmaMember.id, scheduleId: hiitClass.id, status: 'confirmed' },\r\n+      { memberId: tinaMember.id, scheduleId: hiitClass.id, status: 'waitlisted' },\r\n+    ],\r\n+    skipDuplicates: true,\r\n+  });\r\n+  console.log('Seeded: Class Bookings');\r\n+\r\n+\r\n+  // --- PERMISSIONS ---\r\n+  const roles = ['super_admin', 'franchise_admin', 'trainer', 'staff', 'member'] as const;\r\n+  const permissionKeys = [\r\n+    'view_dashboard', 'view_members', 'edit_members', 'view_reports', 'manage_billing',\r\n+    'view_schedule', 'edit_schedule', 'manage_trainers', 'manage_staff', 'manage_clubs',\r\n+    'view_leads', 'edit_leads', 'view_products', 'manage_products', 'view_tasks', 'manage_tasks',\r\n+    'view_resources', 'manage_resources', 'view_communications', 'send_communications',\r\n+    'self_book_classes', 'view_own_profile', 'edit_own_profile', 'view_own_invoices', 'view_own_attendances'\r\n+  ] as const;\r\n+\r\n+  for (const role of roles) {\r\n+    for (const key of permissionKeys) {\r\n+      await prisma.permission.upsert({\r\n+        where: { role_key: { role, key } },\r\n+        update: {},\r\n+        create: {\r\n+          role,\r\n+          key,\r\n+          // Define permissions logic here:\r\n+          allowed: (role === 'super_admin') ||\r\n+                   (role === 'franchise_admin' && !['manage_clubs'].includes(key)) || // Franchise admin can't manage clubs themselves\r\n+                   (role === 'trainer' && ['view_dashboard', 'view_schedule', 'edit_schedule', 'view_members', 'view_resources', 'view_own_profile', 'edit_own_profile', 'view_own_attendances'].includes(key)) ||\r\n+                   (role === 'staff' && ['view_dashboard', 'view_members', 'view_schedule', 'view_resources', 'view_communications', 'send_communications', 'view_products', 'manage_products', 'view_tasks', 'manage_tasks', 'view_own_profile', 'edit_own_profile', 'view_own_attendances'].includes(key)) ||\r\n+                   (role === 'member' && ['view_dashboard', 'view_schedule', 'self_book_classes', 'view_own_profile', 'edit_own_profile', 'view_own_invoices', 'view_own_attendances', 'view_resources'].includes(key))\r\n+        },\r\n+      });\r\n+    }\r\n+  }\r\n+  console.log('Seeded: Permissions');\r\n+\r\n+\r\n+  // --- TRAINING RESOURCES ---\r\n+  await prisma.trainingResource.createMany({\r\n+    data: [\r\n+      {\r\n+        title: 'Gym SOP PDF',\r\n+        description: 'Standard Operating Procedures for all staff',\r\n+        type: 'document',\r\n+        fileUrl: '/uploads/gym-sop.pdf',\r\n+        tags: ['operations', 'rules'],\r\n+        roles: ['staff', 'trainer', 'franchise_admin', 'super_admin'],\r\n+      },\r\n+      {\r\n+        title: 'Member Check-In Tutorial',\r\n+        description: 'How to check in members at the front desk',\r\n+        type: 'video',\r\n+        videoUrl: 'https://www.youtube.com/watch?v=dQw4w9WgXcQ', // Placeholder, replace with actual video\r\n+        tags: ['checkin', 'frontdesk'],\r\n+        roles: ['franchise_admin', 'staff'],\r\n+      },\r\n+    ],\r\n+    skipDuplicates: true,\r\n+  });\r\n+  console.log('Seeded: Training Resources');\r\n+\r\n+  // --- LEADS ---\r\n+  const lead1 = await prisma.lead.upsert({\r\n+    where: { email: 'prospect1@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      name: 'Liam Hunt',\r\n+      email: 'prospect1@gym.com',\r\n+      phone: '555-111-2222',\r\n+      status: 'NEW',\r\n+      clubId: chicagoClub.id,\r\n+      leadSource: 'Website Form',\r\n+      assignedFor: franchiseChicagoUser.id, // Assign to Chicago admin\r\n+    },\r\n+  });\r\n+  console.log('Seeded: Lead 1');\r\n+\r\n+  const lead2 = await prisma.lead.upsert({\r\n+    where: { email: 'prospect2@gym.com' },\r\n+    update: {},\r\n+    create: {\r\n+      name: 'Grace Miles',\r\n+      email: 'prospect2@gym.com',\r\n+      phone: '555-333-4444',\r\n+      status: 'CONTACTED',\r\n+      clubId: austinClub.id,\r\n+      leadSource: 'Referral',\r\n+      assignedFor: franchiseAustinUser.id, // Assign to Austin admin\r\n+    },\r\n+  });\r\n+  console.log('Seeded: Lead 2');\r\n+\r\n+  // --- PRODUCTS & TRANSACTIONS ---\r\n+  const proteinPowder = await prisma.product.upsert({\r\n+    where: { name: 'Protein Powder' },\r\n+    update: {},\r\n+    create: { name: 'Protein Powder', category: 'Supplements', price: 35.00, stock: 50, clubId: hqClub.id },\r\n+  });\r\n+  const waterBottle = await prisma.product.upsert({\r\n+    where: { name: 'Gym Water Bottle' },\r\n+    update: {},\r\n+    create: { name: 'Gym Water Bottle', category: 'Merchandise', price: 15.00, stock: 100, clubId: chicagoClub.id },\r\n+  });\r\n+  console.log('Seeded: Products');\r\n+\r\n+  const staffTransactionUser = await prisma.user.findFirst({ where: { role: 'staff', clubId: chicagoClub.id } });\r\n+\r\n+  if (staffTransactionUser) {\r\n+    const transaction1 = await prisma.productTransaction.create({\r\n+      data: {\r\n+        staffId: staffTransactionUser.id,\r\n+        clubId: chicagoClub.id,\r\n+        total: 50.00,\r\n+        method: 'card',\r\n+        items: {\r\n+          create: [\r\n+            { productId: proteinPowder.id, quantity: 1, unitPrice: 35.00 },\r\n+            { productId: waterBottle.id, quantity: 1, unitPrice: 15.00 },\r\n+          ],\r\n+        },\r\n+      },\r\n+    });\r\n+    console.log('Seeded: Product Transaction 1');\r\n+  } else {\r\n+    console.warn('Skipped seeding product transaction: No staff user found for Chicago club.');\r\n+  }\r\n+\r\n+  // --- TASKS ---\r\n+  await prisma.task.createMany({\r\n+    data: [\r\n+      {\r\n+        title: 'Check equipment maintenance logs',\r\n+        description: 'Review logs for last month and schedule repairs if needed.',\r\n+        status: 'PENDING',\r\n+        dueDate: getFutureDate(10),\r\n+        assignedTo: franchiseChicagoUser.id,\r\n+        assignedBy: superAdminUser.id || franchiseChicagoUser.id, // Assuming superAdminUser is created\r\n+        clubId: chicagoClub.id,\r\n+      },\r\n+      {\r\n+        title: 'Follow up with new prospects',\r\n+        description: 'Call new leads from yesterday and schedule tours.',\r\n+        status: 'PENDING',\r\n+        dueDate: getFutureDate(2),\r\n+        assignedTo: staffUser.id, // Assign to staff\r\n+        assignedBy: franchiseChicagoUser.id,\r\n+        clubId: chicagoClub.id,\r\n+      },\r\n+    ],\r\n+    skipDuplicates: true,\r\n+  });\r\n+  console.log('Seeded: Tasks');\r\n+\r\n+\r\n+  console.log('✅ All data seeding complete!');\r\n+}\r\n+\r\n+main()\r\n+  .catch((e) => {\r\n+    console.error('❌ Seed failed:', e);\r\n+    process.exit(1);\r\n+  })\r\n+  .finally(() => prisma.$disconnect());\n\\ No newline at end of file\n"
                },
                {
                    "date": 1753181133287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { PrismaClient } from '@prisma/client';\r\n import bcrypt from 'bcryptjs';\r\n import jwt from 'jsonwebtoken'; // For generating mock setup tokens\r\n+import { v4 as uuidv4 } from 'uuid'; // Import UUID generator\r\n \r\n const prisma = new PrismaClient();\r\n \r\n // Helper to generate a future date for token expiry (e.g., 24 hours from now)\r\n@@ -14,31 +15,10 @@\n async function main() {\r\n   const hashedPassword = await bcrypt.hash('password123', 10); // Standard password for active users\r\n   const JWT_SECRET_MOCK = process.env.JWT_SECRET || 'your-super-secret-jwt-key-for-seed'; // Use your actual JWT_SECRET in .env!\r\n \r\n-  // Clear existing data (optional, but good for a fresh seed)\r\n-  // await prisma.booking.deleteMany();\r\n-  // await prisma.classSchedule.deleteMany();\r\n-  // await prisma.invoice.deleteMany();\r\n-  // await prisma.membership.deleteMany();\r\n-  // await prisma.membershipPlan.deleteMany();\r\n-  // await prisma.trainer.deleteMany();\r\n-  // await prisma.member.deleteMany();\r\n-  // await prisma.lead.deleteMany();\r\n-  // await prisma.communication.deleteMany();\r\n-  // await prisma.device.deleteMany();\r\n-  // await prisma.permission.deleteMany();\r\n-  // await prisma.trainingResource.deleteMany();\r\n-  // await prisma.productTransactionItem.deleteMany();\r\n-  // await prisma.productTransaction.deleteMany();\r\n-  // await prisma.product.deleteMany();\r\n-  // await prisma.task.deleteMany();\r\n-  // await prisma.attendance.deleteMany();\r\n-  // await prisma.user.deleteMany();\r\n-  // await prisma.club.deleteMany();\r\n-  // console.log('Cleared existing data.');\r\n-\r\n   // --- CLUBS ---\r\n+  // Ensure the HQ club is retrieved or created so its ID is available for tasks\r\n   const hqClub = await prisma.club.upsert({\r\n     where: { id: 'clb_hq' }, // Using a custom ID for HQ\r\n     update: {},\r\n     create: {\r\n@@ -71,10 +51,10 @@\n   });\r\n   console.log('Seeded: Austin Club (ID:', austinClub.id, ')');\r\n \r\n   // --- USERS ---\r\n-  // Super Admin (ACTIVE)\r\n-  await prisma.user.upsert({\r\n+  // Super Admin (ACTIVE) - Store in a variable\r\n+  const superAdminUser = await prisma.user.upsert({\r\n     where: { email: 'super@gym.com' },\r\n     update: {},\r\n     create: {\r\n       email: 'super@gym.com',\r\n@@ -86,9 +66,9 @@\n     },\r\n   });\r\n   console.log('Seeded: Super Admin User (super@gym.com)');\r\n \r\n-  // Franchise Admins (ACTIVE)\r\n+  // Franchise Admins (ACTIVE) - Store in variables\r\n   const franchiseChicagoUser = await prisma.user.upsert({\r\n     where: { email: 'franchise.chicago@gym.com' },\r\n     update: {},\r\n     create: {\r\n@@ -121,14 +101,13 @@\n     where: { email: 'alyssa@gym.com' },\r\n     update: {},\r\n     create: {\r\n       email: 'alyssa@gym.com',\r\n-      // No password initially\r\n       role: 'trainer',\r\n       name: 'Alyssa Kathan',\r\n       clubId: chicagoClub.id,\r\n       status: 'PENDING',\r\n-      setupPasswordToken: jwt.sign({ userId: 'mock-alyssa-id', email: 'alyssa@gym.com' }, JWT_SECRET_MOCK, { expiresIn: '1d' }), // Mock token\r\n+      setupPasswordToken: jwt.sign({ userId: uuidv4(), email: 'alyssa@gym.com' }, JWT_SECRET_MOCK, { expiresIn: '1d' }), // Mock token\r\n       setupPasswordExpires: getFutureDate(1),\r\n     },\r\n   });\r\n   console.log('Seeded: Trainer User (alyssa@gym.com) - PENDING');\r\n@@ -138,14 +117,13 @@\n     where: { email: 'jordan@gym.com' },\r\n     update: {},\r\n     create: {\r\n       email: 'jordan@gym.com',\r\n-      // No password initially\r\n       role: 'trainer',\r\n       name: 'Jordan Sparks',\r\n       clubId: austinClub.id,\r\n       status: 'PENDING',\r\n-      setupPasswordToken: jwt.sign({ userId: 'mock-jordan-id', email: 'jordan@gym.com' }, JWT_SECRET_MOCK, { expiresIn: '1d' }), // Mock token\r\n+      setupPasswordToken: jwt.sign({ userId: uuidv4(), email: 'jordan@gym.com' }, JWT_SECRET_MOCK, { expiresIn: '1d' }), // Mock token\r\n       setupPasswordExpires: getFutureDate(1),\r\n     },\r\n   });\r\n   console.log('Seeded: Trainer User (jordan@gym.com) - PENDING');\r\n@@ -155,14 +133,13 @@\n     where: { email: 'staff@gym.com' },\r\n     update: {},\r\n     create: {\r\n       email: 'staff@gym.com',\r\n-      // No password initially\r\n       role: 'staff',\r\n       name: 'Sarah Staff',\r\n       clubId: chicagoClub.id,\r\n       status: 'PENDING',\r\n-      setupPasswordToken: jwt.sign({ userId: 'mock-staff-id', email: 'staff@gym.com' }, JWT_SECRET_MOCK, { expiresIn: '1d' }), // Mock token\r\n+      setupPasswordToken: jwt.sign({ userId: uuidv4(), email: 'staff@gym.com' }, JWT_SECRET_MOCK, { expiresIn: '1d' }), // Mock token\r\n       setupPasswordExpires: getFutureDate(1),\r\n     },\r\n   });\r\n   console.log('Seeded: Staff User (staff@gym.com) - PENDING');\r\n@@ -186,14 +163,13 @@\n     where: { email: 'tina@gym.com' },\r\n     update: {},\r\n     create: {\r\n       email: 'tina@gym.com',\r\n-      // No password initially\r\n       role: 'member',\r\n       name: 'Tina Ray',\r\n       clubId: chicagoClub.id,\r\n       status: 'PENDING',\r\n-      setupPasswordToken: jwt.sign({ userId: 'mock-tina-id', email: 'tina@gym.com' }, JWT_SECRET_MOCK, { expiresIn: '1d' }), // Mock token\r\n+      setupPasswordToken: jwt.sign({ userId: uuidv4(), email: 'tina@gym.com' }, JWT_SECRET_MOCK, { expiresIn: '1d' }), // Mock token\r\n       setupPasswordExpires: getFutureDate(1),\r\n     }\r\n   });\r\n   console.log('Seeded: Member User (tina@gym.com) - PENDING');\r\n@@ -428,23 +404,40 @@\n   });\r\n   console.log('Seeded: Lead 2');\r\n \r\n   // --- PRODUCTS & TRANSACTIONS ---\r\n-  const proteinPowder = await prisma.product.upsert({\r\n-    where: { name: 'Protein Powder' },\r\n-    update: {},\r\n-    create: { name: 'Protein Powder', category: 'Supplements', price: 35.00, stock: 50, clubId: hqClub.id },\r\n-  });\r\n-  const waterBottle = await prisma.product.upsert({\r\n-    where: { name: 'Gym Water Bottle' },\r\n-    update: {},\r\n-    create: { name: 'Gym Water Bottle', category: 'Merchandise', price: 15.00, stock: 100, clubId: chicagoClub.id },\r\n-  });\r\n+  // Fix: Use createMany with skipDuplicates or ensure unique IDs for upsert.\r\n+  // For products, if 'name' is not @unique, we can't use it in 'where'.\r\n+  // We'll just create them, and if you run seed multiple times, they'll be duplicated unless ids match.\r\n+  // A better solution would be to add @unique to 'name' in Product model if it truly is unique.\r\n+  // For now, let's create them and capture their IDs.\r\n+\r\n+  const productsToCreate = [\r\n+    { name: 'Protein Powder', category: 'Supplements', price: 35.00, stock: 50, clubId: hqClub.id },\r\n+    { name: 'Gym Water Bottle', category: 'Merchandise', price: 15.00, stock: 100, clubId: chicagoClub.id },\r\n+  ];\r\n+\r\n+  // Manual loop to get created product IDs, assuming they don't exist yet for simplicity in seeding\r\n+  const createdProducts = [];\r\n+  for (const productData of productsToCreate) {\r\n+      const existingProduct = await prisma.product.findFirst({\r\n+          where: { name: productData.name, clubId: productData.clubId }\r\n+      });\r\n+      if (existingProduct) {\r\n+          createdProducts.push(existingProduct);\r\n+      } else {\r\n+          createdProducts.push(await prisma.product.create({ data: productData }));\r\n+      }\r\n+  }\r\n+\r\n+  const proteinPowder = createdProducts.find(p => p.name === 'Protein Powder');\r\n+  const waterBottle = createdProducts.find(p => p.name === 'Gym Water Bottle');\r\n+\r\n   console.log('Seeded: Products');\r\n \r\n   const staffTransactionUser = await prisma.user.findFirst({ where: { role: 'staff', clubId: chicagoClub.id } });\r\n \r\n-  if (staffTransactionUser) {\r\n+  if (staffTransactionUser && proteinPowder && waterBottle) {\r\n     const transaction1 = await prisma.productTransaction.create({\r\n       data: {\r\n         staffId: staffTransactionUser.id,\r\n         clubId: chicagoClub.id,\r\n@@ -459,9 +452,9 @@\n       },\r\n     });\r\n     console.log('Seeded: Product Transaction 1');\r\n   } else {\r\n-    console.warn('Skipped seeding product transaction: No staff user found for Chicago club.');\r\n+    console.warn('Skipped seeding product transaction: Missing staff user or products.');\r\n   }\r\n \r\n   // --- TASKS ---\r\n   await prisma.task.createMany({\r\n@@ -471,17 +464,17 @@\n         description: 'Review logs for last month and schedule repairs if needed.',\r\n         status: 'PENDING',\r\n         dueDate: getFutureDate(10),\r\n         assignedTo: franchiseChicagoUser.id,\r\n-        assignedBy: superAdminUser.id || franchiseChicagoUser.id, // Assuming superAdminUser is created\r\n+        assignedBy: superAdminUser.id, // Fixed: Use the actual superAdminUser variable\r\n         clubId: chicagoClub.id,\r\n       },\r\n       {\r\n         title: 'Follow up with new prospects',\r\n         description: 'Call new leads from yesterday and schedule tours.',\r\n         status: 'PENDING',\r\n         dueDate: getFutureDate(2),\r\n-        assignedTo: staffUser.id, // Assign to staff\r\n+        assignedTo: staffUser.id,\r\n         assignedBy: franchiseChicagoUser.id,\r\n         clubId: chicagoClub.id,\r\n       },\r\n     ],\r\n"
                }
            ],
            "date": 1752122385177,
            "name": "Commit-0",
            "content": "import bcrypt from 'bcryptjs';\r\nimport prisma from '../src/lib/prisma';\r\n\r\nasync function seed() {\r\n  await prisma.user.createMany({\r\n    data: [\r\n      {\r\n        email: 'super@gym.com',\r\n        password: await bcrypt.hash('super123', 10),\r\n        role: 'super_admin',\r\n      },\r\n      {\r\n        email: 'franchise@gym.com',\r\n        password: await bcrypt.hash('fran123', 10),\r\n        role: 'franchise_admin',\r\n        clubId: 'CLUB001',\r\n      },\r\n    ],\r\n  });\r\n}\r\n\r\nseed().then(() => {\r\n  console.log('Seeding done.');\r\n});\r\n"
        }
    ]
}