// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  password String?
  role     Role
  clubId   String?
  club     Club?   @relation(fields: [clubId], references: [id])
  name     String?

  setupPasswordToken      String?       @unique // Token for setting initial password
  setupPasswordExpires    DateTime?     // Expiry for the token
  status                  UserStatus    @default(PENDING) // New status for account lifecycle

  assignedLeads Lead[]

  // Explicit 1:1 relation to Trainer profile
  trainerProfile Trainer? @relation(name: "UserToTrainer")

  // Explicit 1:1 relation to Member profile
  memberProfile  Member?  @relation(name: "UserToMember")

  productTransactions ProductTransaction[]

  markedAttendances Attendance[] @relation("MarkedByRelation")

  assignedTasks     Task[] @relation("AssignedTasks")     // tasks assigned to this user
  tasksAssignedByMe Task[] @relation("AssignedByTasks")   // tasks created by this user

}

enum UserStatus {
  PENDING   // Account created, invite email sent, password not set
  ACTIVE    // Password set, account active, can log in
  INACTIVE  // Account disabled (e.g., by super_admin or franchise_admin)
}


model Club {
  id        String     @id @default(uuid())
  name      String
  location  String?
  users     User[] 
  members   Member[]
  trainers  Trainer[]
  locations Location[]
  timezone   String
  clubEmail  String

  schedules ClassSchedule[]
  invoices  Invoice[]

  communications Communication[]

  devices Device[]

  status String @default("active")

  leads     Lead[]

  productTransactions ProductTransaction[]

  checkins Attendance[] @relation("ClubCheckinRelation")

}

model Trainer {
  id      String   @id @default(uuid())
  userId           String?          @unique // Ensure only one Trainer profile per User
  user             User?           @relation(name: "UserToTrainer", fields: [userId], references: [id])
  name    String
  email   String   @unique
  clubId  String
  club    Club     @relation(fields: [clubId], references: [id])
  members Member[]

  schedules ClassSchedule[]
  canCreateClasses Boolean         @default(true)

  specialization String?

  phone String?

  @@index([userId]) 
  @@index([clubId]) 
}

enum Role {
  super_admin
  franchise_admin
  trainer
  staff
  member
}

model Member {
  id          String    @id @default(uuid())

  userId            String?         @unique // Optional: Not all members might have a login account initially (e.g., prospects)
  user              User?           @relation(name: "UserToMember", fields: [userId], references: [id])

  firstName   String
  lastName    String
  email       String    @unique
  phone       String?
  work        String?
  dateOfBirth DateTime?
  gender      String
  avatarUrl   String?
  keyFob      String?
  tags        String?
  note        String?

  memberType  String // 'member' or 'prospect'

  // Address
  street        String?
  city          String?
  state         String?
  zip           String?
  addressSearch String?

  // Marketing
  salesRep        String?
  sourcePromotion String?
  referredBy      String?

  // Additional

  joiningDate     DateTime?
  occupation      String?
  organization    String?
  involvementType String?

  // Emergency Contact
  emergency Json?

  //medical information
  medicalInfo       String?
  allergies         String?
  medications       String?
  chronicConditions String?
  injuries          String?
  doctorContact     String?
  lastExamDate      DateTime?

  clubId           String
  club             Club   @relation(fields: [clubId], references: [id])

  trainerId String? // optional
  trainer   Trainer? @relation(fields: [trainerId], references: [id])

  createdAt DateTime @default(now())

  membership Membership[]

  paymentMethod PaymentMethod?

  invoice Invoice[]

  bookings Booking[]

  attendances Attendance[]

  communications Communication[]

  leadId        String? @unique
  lead          Lead?   @relation(fields: [leadId], references: [id])

  @@index([userId]) // Index for faster lookups by user
  @@index([clubId])
  @@index([trainerId])
}

model Membership {
  id        String   @id @default(uuid())
  planName  String
  startDate DateTime
  endDate   DateTime
  autoRenew Boolean
  status    String
  member    Member   @relation(fields: [memberId], references: [id])
  memberId  String
}

model MembershipPlan {
  id             String   @id @default(uuid())
  name           String   @unique
  description    String?
  price          Float
  durationInDays Int
  createdAt      DateTime @default(now())
}

model PaymentMethod {
  id                    String @id @default(uuid())
  stripePaymentMethodId String
  cardBrand             String
  last4                 String
  expMonth              Int
  expYear               Int
  member                Member @relation(fields: [memberId], references: [id])
  memberId              String @unique
}

model Invoice {
  id       String        @id @default(uuid())
  member   Member?       @relation(fields: [memberId], references: [id])
  memberId String?
  planName String
  amount   Float
  status   InvoiceStatus
  issuedAt DateTime      @default(now())
  dueDate  DateTime

  clubId String
  club   Club   @relation(fields: [clubId], references: [id])
}

enum InvoiceStatus {
  paid
  unpaid
  overdue
  failed
}

model ClassSchedule {
  id          String   @id @default(uuid())
  title       String
  date        DateTime
  duration    Int // in minutes

  locationId  String?
  location    Location? @relation(fields: [locationId], references: [id])

  trainerId   String
  trainer     Trainer  @relation(fields: [trainerId], references: [id])

  maxCapacity Int

  bookings     Booking[]
  createdAt     DateTime  @default(now())

  clubId       String
  club         Club   @relation(fields: [clubId], references: [id])

  attendances   Attendance[]
  classType     String  // New: e.g., "Personal Training", "Group Session"
  status       String   @default("scheduled") // New: e.g., "scheduled", "cancelled", "completed"

  @@index([trainerId])
  @@index([clubId])
  @@index([locationId])
}

model Booking {
  id         String        @id @default(uuid())
  memberId   String
  member     Member        @relation(fields: [memberId], references: [id])
  schedule   ClassSchedule @relation(fields: [scheduleId], references: [id])
  scheduleId String
  status      BookingStatus // Enum: 'confirmed', 'canceled', 'waitlisted'

  createdAt  DateTime      @default(now())

  @@index([memberId])
  @@index([scheduleId])
}

enum BookingStatus {
  confirmed
  canceled
  waitlisted
}


model Location {
  id        String   @id @default(uuid())
  name      String
  clubId    String
  club      Club     @relation(fields: [clubId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  schedules ClassSchedule[]
}

model Attendance {
  id         String   @id @default(cuid())
  scheduleId String?
  memberId   String
  status      AttendanceStatus 
  markedAt   DateTime @default(now())
  markedById  String?
  clubId      String? 

  schedule ClassSchedule? @relation(fields: [scheduleId], references: [id])
  member   Member        @relation(fields: [memberId], references: [id])
  markedBy User?         @relation("MarkedByRelation", fields: [markedById], references: [id])
  club     Club?         @relation("ClubCheckinRelation", fields: [clubId], references: [id])


  @@unique([memberId, scheduleId])
  @@index([scheduleId])
  @@index([markedAt])
}

enum AttendanceStatus {
  present
  absent
}

model Communication {
  id        String            @id @default(uuid())
  type      CommunicationType
  content   String?
  note      String
  createdAt DateTime          @default(now())

  leadId    String?              // Reference to Lead (for leads still in CRM system)
  lead      Lead?             @relation(fields: [leadId], references: [id])

  memberId  String? 
  member    Member?  @relation(fields: [memberId], references: [id])

  clubId String
  club   Club   @relation(fields: [clubId], references: [id])
}

enum CommunicationType {
  note
  email
  sms
  push
  call
  meeting
}

model Device {
  id           String   @id @default(uuid())
  clubId       String
  club         Club     @relation(fields: [clubId], references: [id])
  name         String
  status       String   // "online" | "offline"
  lastSync     DateTime
  firmware     String?
  ipAddress    String?
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
}

model Permission {
  id        String   @id @default(uuid())
  role      Role
  key       String   // e.g., "view_members", "edit_reports"
  allowed   Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([role, key])
}

model TrainingResource {
  id          String   @id @default(uuid())
  title       String
  description String?
  fileUrl     String?      // for uploaded files
  videoUrl    String?      // for embedded videos
  type        ResourceType // 'video', 'document', 'checklist'
  tags        String[]     // PostgreSQL array
  roles       Role[]       // enum[] â†’ ['staff', 'trainer']
  createdAt   DateTime @default(now())
}

enum ResourceType {
  video
  document
  checklist
}


model Lead {
  id             String       @id @default(uuid())
  name           String
  email          String     @unique
  phone          String
  status         LeadStatus @default(NEW)

  assignedFor    String?       // User ID of the person the lead is assigned to
  assignedUser   User?      @relation(fields: [assignedFor], references: [id]) // Link to User model

  clubId         String       // Reference to the Club (Franchise)
  club           Club       @relation(fields: [clubId], references: [id])  // Link to Club model

  leadSource     String?    // Optional field to track the source of the lead
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  convertedAt    DateTime? 

  communications Communication[] // Link to communications related to the lead
  member         Member?    // Link to Member (once the lead converts into a member)
}

enum LeadStatus {
  NEW
  CONTACTED
  SCHEDULED
  CONVERTED
}

model Product {
  id        String   @id @default(cuid())
  name      String
  category  String
  price     Float
  stock     Int
  clubId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactionItems ProductTransactionItem[]

  @@index([clubId])
  @@index([category])

}

model ProductTransaction {
  id         String   @id @default(cuid())
  staffId    String   // FK to User
  clubId     String
  club        Club    @relation(fields: [clubId], references: [id]) // if needed
  total      Float
  method     String   // "cash" | "card"
  createdAt  DateTime @default(now())

  staff       User                     @relation(fields: [staffId], references: [id])
  items ProductTransactionItem[]

  @@index([staffId])
  @@index([clubId])
  @@index([createdAt])
}
model ProductTransactionItem {
  id              String   @id @default(cuid())
  transactionId   String
  productId       String
  quantity        Int
  unitPrice       Float

  transaction ProductTransaction @relation(fields: [transactionId], references: [id])
  product     Product            @relation(fields: [productId], references: [id])
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  dueDate     DateTime
  assignedTo  String
  assignedBy  String
  clubId      String
  createdAt   DateTime @default(now())

  staff       User     @relation("AssignedTasks", fields: [assignedTo], references: [id])
  assignedByUser User  @relation("AssignedByTasks", fields: [assignedBy], references: [id])

  @@index([assignedTo])
  @@index([clubId])
}

enum TaskStatus {
  PENDING
  COMPLETED
}


